{
  "version": 3,
  "sources": ["../../@material/web/dialog/internal/dialog.ts", "../../@material/web/dialog/internal/dialog-styles.css.ts", "../../@material/web/dialog/dialog.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../elevation/elevation.js';\n\nimport {html, LitElement, PropertyValues} from 'lit';\nimport {property, query, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {redispatchEvent} from '../../internal/controller/events.js';\nimport {createThrottle, msFromTimeCSSValue} from '../../internal/motion/animation.js';\n\n// This is required for decorators.\n// tslint:disable:no-new-decorators\n\n/**\n * Default close action.\n */\nexport const CLOSE_ACTION = 'close';\n\nconst OPENING_TRANSITION_PROP = '--_opening-transition-duration';\nconst CLOSING_TRANSITION_PROP = '--_closing-transition-duration';\n\n/**\n * A dialog component.\n * \n * @fires opening Dispatched when the dialog is opening before any animations.\n * @fires opened Dispatched when the dialog has opened after any animations.\n * @fires closing Dispatched when the dialog is closing before any animations.\n * @fires closed Dispatched when the dialog has closed after any animations.\n * @fires cancel The native HTMLDialogElement cancel event.\n */\nexport class Dialog extends LitElement {\n  private static preventedScrollingCount = 0;\n  private static scrollbarTester: HTMLDivElement;\n\n  private static setDocumentScrollingDisabled(disabled = false) {\n    let {preventedScrollingCount, scrollbarTester} = Dialog;\n    Dialog.preventedScrollingCount = preventedScrollingCount =\n        Math.max(preventedScrollingCount + (Number(disabled) || -1), 0);\n    const shouldPrevent = Boolean(preventedScrollingCount);\n    const {style} = document.body;\n    if (shouldPrevent && style.overflow === 'hidden') {\n      return;\n    }\n    if (scrollbarTester === undefined) {\n      Dialog.scrollbarTester = scrollbarTester = document.createElement('div');\n      scrollbarTester.style.cssText =\n          `position: absolute; height: 0; width: 100%; visibility: hidden; pointer-events: none;`;\n    }\n    // Appends an element to see if its offsetWidth changes when overflow is\n    // altered. If it does, then add end inline padding to restore the width to\n    // avoid a visible layout shift.\n    document.body.append(scrollbarTester);\n    const {offsetWidth} = scrollbarTester;\n    style.overflow = shouldPrevent ? 'hidden' : '';\n    const scrollbarWidth = scrollbarTester.offsetWidth - offsetWidth;\n    scrollbarTester.remove();\n    style.paddingInlineEnd = shouldPrevent ? `${scrollbarWidth}px` : '';\n  }\n\n  /**\n   * Opens the dialog when set to `true` and closes it when set to `false`.\n   */\n  @property({type: Boolean}) open = false;\n\n  /**\n   * Setting fullscreen displays the dialog fullscreen on small screens.\n   * This can be customized via the `fullscreenBreakpoint` property.\n   * When showing fullscreen, the header will take up less vertical space, and\n   * the dialog will have a `showing-fullscreen`attribute, allowing content to\n   * be styled in this state.\n   *\n   * Dialogs can be sized by setting:\n   *\n   * * --md-dialog-container-min-block-size\n   * * --md-dialog-container-max-block-size\n   * * --md-dialog-container-min-inline-size\n   * * --md-dialog-container-max-inline-size\n   *\n   * These are typically configured via media queries and are independent of the\n   * fullscreen setting.\n   */\n  @property({type: Boolean}) fullscreen = false;\n\n  /**\n   * A media query string specifying the breakpoint at which the dialog\n   * should be shown fullscreen. Note, this only applies when the `fullscreen`\n   * property is set.\n   *\n   * By default, the dialog is shown fullscreen on screens less than 600px wide\n   * or 400px tall.\n   */\n  @property({attribute: 'fullscreen-breakpoint'})\n  fullscreenBreakpoint = '(max-width: 600px), (max-height: 400px)';\n\n  /**\n   * Hides the dialog footer, making any content slotted into the footer\n   * inaccessible.\n   */\n  @property({type: Boolean, attribute: 'footer-hidden'}) footerHidden = false;\n\n  /**\n   * Renders footer content in a vertically stacked alignment rather than the\n   * normal horizontal alignment.\n   */\n  @property({type: Boolean}) stacked = false;\n\n  /**\n   * When the dialog is closed it disptaches `closing` and `closed` events.\n   * These events have an action property which has a default value of\n   * the value of this property. Specific actions have explicit values but when\n   * a value is not specified, the default is used. For example, clicking the\n   * scrim, pressing escape, or clicking a button with an action attribute set\n   * produce an explicit action.\n   *\n   * Defaults to `close`.\n   */\n  @property({attribute: 'default-action'}) defaultAction = CLOSE_ACTION;\n\n  /**\n   * The name of an attribute which can be placed on any element slotted into\n   * the dialog. If an element has an action attribute set, clicking it will\n   * close the dialog and the `closing` and `closed` events dispatched will\n   * have their action property set the value of this attribute on the\n   * clicked element.The default value is `dialog-action`. For example,\n   *\n   *   <md-dialog>\n   *    Content\n   *     <md-filled-button slot=\"footer\" dialog-action=\"buy\">\n   *       Buy\n   *     </md-filled-button>\n   *   </md-dialog>\n   */\n  @property({attribute: 'action-attribute'}) actionAttribute = 'dialog-action';\n\n  /**\n   * When the dialog is opened, it will focus the first element which has\n   * an attribute name matching this property. The default value is\n   * `dialogFocus`. For example:\n   *\n   *  <md-dialog>\n   *    <md-filled-text-field\n   *      label=\"Enter some text\"\n   *      dialog-focus\n   *    >\n   *    </md-filled-text-field>\n   *  </md-dialog>\n   */\n  @property({attribute: 'focus-attribute'}) focusAttribute = 'dialog-focus';\n\n  /**\n   * Clicking on the scrim surrounding the dialog closes the dialog.\n   * The `closing` and `closed` events this produces have an `action` property\n   * which is the value of this property and defaults to `close`.\n   */\n  @property({attribute: 'scrim-click-action'}) scrimClickAction = CLOSE_ACTION;\n\n  /**\n   * Pressing the `escape` key while the dialog is open closes the dialog.\n   * The `closing` and `closed` events this produces have an `action` property\n   * which is the value of this property and defaults to `close`.\n   */\n  @property({attribute: 'escape-key-action'}) escapeKeyAction = CLOSE_ACTION;\n\n  /**\n   * When opened, the dialog is displayed modeless or non-modal. This\n   * allows users to interact with content outside the dialog without\n   * closing the dialog and does not display the scrim around the dialog.\n   */\n  @property({type: Boolean, reflect: true}) modeless = false;\n\n  /**\n   * Set to make the dialog position draggable.\n   */\n  @property({type: Boolean}) override draggable = false;\n\n  private readonly throttle = createThrottle();\n\n  @query('.dialog', true)\n  private readonly dialogElement!: HTMLDialogElement|null;\n\n  // slots tracked to find focusable elements.\n  @query('slot[name=footer]', true)\n  private readonly footerSlot!: HTMLSlotElement;\n  @query('slot:not([name])', true)\n  private readonly contentSlot!: HTMLSlotElement;\n  // for scrolling related styling\n  @query(`.content`, true)\n  private readonly contentElement!: HTMLDivElement|null;\n  // used to determine container size for dragging\n  @query(`.container`, true)\n  private readonly containerElement!: HTMLDivElement|null;\n  // used to determine where users can drag from.\n  @query(`.header`, true) private readonly headerElement!: HTMLDivElement|null;\n\n  /**\n   * Private properties that reflect for styling manually in `updated`.\n   */\n  @state() private showingFullscreen = false;\n  @state() private showingOpen = false;\n  @state() private opening = false;\n  @state() private closing = false;\n\n  /**\n   * Transition kind. Supported options include: grow, shrink, grow-down,\n   * grow-up, grow-left, and grow-right.\n   *\n   * Defaults to grow-down.\n   */\n  @property({reflect: true}) transition = 'grow-down';\n\n  private currentAction: string|undefined;\n\n  @state() private dragging = false;\n  private readonly dragMargin = 8;\n  private dragInfo?: [number, number, number, number]|undefined;\n\n  /**\n   * Opens and shows the dialog. This is equivalent to setting the `open`\n   * property to true.\n   */\n  show() {\n    this.open = true;\n  }\n\n  /**\n   * Closes the dialog. This is equivalent to setting the `open`\n   * property to false.\n   */\n  close(action = '') {\n    this.currentAction = action;\n    this.open = false;\n  }\n\n  /**\n   * Opens and shows the dialog if it is closed; otherwise closes it.\n   */\n  toggleShow() {\n    if (this.open) {\n      this.close(this.currentAction);\n    } else {\n      this.show();\n    }\n  }\n\n  private getContentScrollInfo() {\n    if (!this.hasUpdated || !this.contentElement) {\n      return {isScrollable: false, isAtScrollTop: true, isAtScrollBottom: true};\n    }\n    const {scrollTop, scrollHeight, offsetHeight, clientHeight} =\n        this.contentElement;\n    return {\n      isScrollable: scrollHeight > offsetHeight,\n      isAtScrollTop: scrollTop === 0,\n      isAtScrollBottom:\n          Math.abs(Math.round(scrollHeight - scrollTop) - clientHeight) <= 2\n    };\n  }\n\n  protected override render() {\n    const {isScrollable, isAtScrollTop, isAtScrollBottom} =\n        this.getContentScrollInfo();\n    return html`\n    <dialog\n      @close=${this.handleDialogDismiss}\n      @cancel=${this.handleDialogDismiss}\n      @click=${this.handleDialogClick}\n      class=\"dialog ${classMap({\n      'stacked': this.stacked,\n      'scrollable': isScrollable,\n      'scroll-divider-header': !isAtScrollTop,\n      'scroll-divider-footer': !isAtScrollBottom,\n      'footerHidden': this.footerHidden\n    })}\"\n      aria-labelledby=\"header\"\n      aria-describedby=\"content\"\n    >\n      <div class=\"container ${classMap({\n      'dragging': this.dragging\n    })}\"\n        @pointermove=${this.handlePointerMove}\n        @pointerup=${this.handleDragEnd}\n      >\n        <md-elevation></md-elevation>\n        <header class=\"header\">\n          <slot name=\"header\">\n            <slot name=\"headline-prefix\"></slot>\n            <slot name=\"headline\"></slot>\n            <slot name=\"headline-suffix\"></slot>\n          </slot>\n        </header>\n        <section class=\"content\" @scroll=${this.handleContentScroll}>\n          <slot></slot>\n        </section>\n        <footer class=\"footer\">\n          <slot name=\"footer\"></slot>\n        </footer>\n      </div>\n    </dialog>`;\n  }\n\n  protected override willUpdate(changed: PropertyValues) {\n    if (changed.has('open')) {\n      this.opening = this.open;\n      // only closing if was opened previously...\n      this.closing = !this.open && changed.get('open');\n    }\n    if (changed.has('fullscreen') || changed.has('fullscreenBreakpoint')) {\n      this.updateFullscreen();\n    }\n  }\n\n  protected override firstUpdated() {\n    // Update when content size changes to show/hide scroll dividers.\n    new ResizeObserver(() => {\n      if (this.showingOpen) {\n        this.requestUpdate();\n      }\n    }).observe(this.contentElement!);\n  }\n\n  protected override updated(changed: PropertyValues) {\n    if (changed.get('draggable') && !this.draggable) {\n      this.style.removeProperty('--_container-drag-inline-start');\n      this.style.removeProperty('--_container-drag-block-start');\n    }\n    // Reflect internal state to facilitate styling.\n    this.reflectStateProp(changed, 'opening', this.opening);\n    this.reflectStateProp(changed, 'closing', this.closing);\n    this.reflectStateProp(\n        changed, 'showingFullscreen', this.showingFullscreen,\n        'showing-fullscreen');\n    this.reflectStateProp(\n        changed, 'showingOpen', this.showingOpen, 'showing-open');\n    if (!changed.has('open')) {\n      return;\n    }\n    // prevent body scrolling early only when opening to avoid layout\n    // shift when closing.\n    if (!this.modeless && this.open) {\n      Dialog.setDocumentScrollingDisabled(this.open);\n    }\n    if (this.open) {\n      this.contentElement!.scrollTop = 0;\n      if (this.modeless) {\n        this.dialogElement!.show();\n      } else {\n        // Note, native focus handling fails when focused element is in an\n        // overflow: auto container.\n        this.dialogElement!.showModal();\n      }\n    }\n    // Avoids dispatching initial state.\n    const shouldDispatchAction = changed.get('open') !== undefined;\n    this.performTransition(shouldDispatchAction);\n  }\n\n  /**\n   * Internal state is reflected here as attributes to effect styling. This\n   * could be done via internal classes, but it's published on the host\n   * to facilitate the (currently undocumented) possibility of customizing\n   * styling of user content based on these states.\n   * Note, in the future this could be done with `:state(...)` when browser\n   * support improves.\n   */\n  private reflectStateProp(\n      changed: PropertyValues, key: string, value: unknown,\n      attribute?: string) {\n    attribute ??= key;\n    if (!changed.has(key)) {\n      return;\n    }\n    if (value) {\n      this.setAttribute(attribute, '');\n    } else {\n      this.removeAttribute(attribute);\n    }\n  }\n\n  private dialogClosedResolver?: () => void;\n\n  private async performTransition(shouldDispatchAction: boolean) {\n    // TODO: pause here only to avoid a double update warning.\n    await this.updateComplete;\n    // Focus initial element.\n    if (this.open) {\n      this.focus();\n    }\n    this.showingOpen = this.open;\n    if (shouldDispatchAction) {\n      this.dispatchActionEvent(this.open ? 'opening' : 'closing');\n    }\n    // Compute desired transition duration.\n    const duration = msFromTimeCSSValue(getComputedStyle(this).getPropertyValue(\n        this.open ? OPENING_TRANSITION_PROP : CLOSING_TRANSITION_PROP));\n    let promise = this.updateComplete;\n    if (duration > 0) {\n      promise = new Promise((r) => {\n        setTimeout(r, duration);\n      });\n    }\n    await promise;\n    this.opening = false;\n    this.closing = false;\n    if (!this.open && this.dialogElement?.open) {\n      // Closing the dialog triggers an asynchronous `close` event.\n      // It's important to wait for this event to fire since it changes the\n      // state of `open` to false.\n      // Without waiting, this element's `closed` event can be called before\n      // the dialog's `close` event, which is problematic since the user\n      // can set `open` in the `closed` event.\n      // The timing of the event appears to vary via browser and does *not*\n      // seem to resolve by \"task\" timing; therefore an explicit promise is\n      // used.\n      const closedPromise = new Promise<void>(resolve => {\n        this.dialogClosedResolver = resolve;\n      });\n      this.dialogElement?.close(this.currentAction || this.defaultAction);\n      await closedPromise;\n      // enable scrolling late to avoid layout shift when closing\n      if (!this.modeless) {\n        Dialog.setDocumentScrollingDisabled(this.open);\n      }\n    }\n    if (shouldDispatchAction) {\n      this.dispatchActionEvent(this.open ? 'opened' : 'closed');\n    }\n    this.currentAction = undefined;\n  }\n\n  private dispatchActionEvent(type: string) {\n    const detail = {action: this.open ? 'none' : this.currentAction};\n    this.dispatchEvent(new CustomEvent(type, {detail, bubbles: true}));\n  }\n\n  /* Live media query for matching user specified fullscreen breakpoint. */\n  private fullscreenQuery?: MediaQueryList;\n  private fullscreenQueryListener:\n      ((event: MediaQueryListEvent) => void)|undefined = undefined;\n  private updateFullscreen() {\n    if (this.fullscreenQuery !== undefined) {\n      this.fullscreenQuery.removeEventListener(\n          'change', this.fullscreenQueryListener!);\n      this.fullscreenQuery = this.fullscreenQueryListener = undefined;\n    }\n    if (!this.fullscreen) {\n      this.showingFullscreen = false;\n      return;\n    }\n    this.fullscreenQuery = window.matchMedia(this.fullscreenBreakpoint);\n    this.fullscreenQuery.addEventListener(\n        'change',\n        (this.fullscreenQueryListener = (event: MediaQueryListEvent) => {\n          this.showingFullscreen = event.matches;\n        }));\n    this.showingFullscreen = this.fullscreenQuery.matches;\n  }\n\n  // handles native close/cancel events and we just ensure\n  // internal state is in sync.\n  private handleDialogDismiss(event: Event) {\n    if (event.type === 'cancel') {\n      this.currentAction = this.escapeKeyAction;\n      // Prevents the <dialog> element from closing when\n      // `escapeKeyAction` is set to an empty string.\n      // It also early returns and avoids <md-dialog> internal state\n      // changes.\n      if (this.escapeKeyAction === '') {\n        event.preventDefault();\n        return;\n      }\n    }\n    this.dialogClosedResolver?.();\n    this.dialogClosedResolver = undefined;\n    this.open = false;\n    this.opening = false;\n    this.closing = false;\n    redispatchEvent(this, event);\n  }\n\n  private handleDialogClick(event: Event) {\n    if (!this.open) {\n      return;\n    }\n    this.currentAction =\n        (event.target as Element).getAttribute(this.actionAttribute) ??\n        (!this.modeless && this.containerElement &&\n                 !event.composedPath().includes(this.containerElement) ?\n             this.scrimClickAction :\n             '');\n    if (this.currentAction !== '') {\n      this.close(this.currentAction);\n    }\n  }\n\n  /* This allows the dividers to dynamically show based on scrolling. */\n  private handleContentScroll() {\n    this.throttle('scroll', () => {\n      this.requestUpdate();\n    });\n  }\n\n  private getFocusElement(): HTMLElement|null {\n    const selector = `[${this.focusAttribute}]`;\n    const slotted = [this.footerSlot, this.contentSlot].flatMap(\n        slot => slot.assignedElements({flatten: true}));\n    for (const el of slotted) {\n      const focusEl = el.matches(selector) ? el : el.querySelector(selector);\n      if (focusEl) {\n        return focusEl as HTMLElement;\n      }\n    }\n    return null;\n  }\n\n  override focus() {\n    this.getFocusElement()?.focus();\n  }\n\n  override blur() {\n    this.getFocusElement()?.blur();\n  }\n\n  private canStartDrag(event: PointerEvent) {\n    if (this.draggable === false || event.defaultPrevented ||\n        !(event.buttons & 1) || !this.headerElement ||\n        !event.composedPath().includes(this.headerElement)) {\n      return false;\n    }\n    return true;\n  }\n\n  private handlePointerMove(event: PointerEvent) {\n    if (!this.dragging && !this.canStartDrag(event) || !this.containerElement) {\n      return;\n    }\n    const {top, left, height, width} =\n        this.containerElement.getBoundingClientRect();\n    if (!this.dragging) {\n      this.containerElement.setPointerCapture(event.pointerId);\n      this.dragging = true;\n      const {x, y} = event;\n      this.dragInfo = [x, y, top, left];\n    }\n    const [sx, sy, st, sl] = this.dragInfo ?? [0, 0, 0, 0];\n    const dx = event.x - sx;\n    const dy = event.y - sy;\n    const ml = window.innerWidth - width - this.dragMargin;\n    const mt = window.innerHeight - height - this.dragMargin;\n    const l = Math.max(this.dragMargin, Math.min(ml, dx + sl));\n    const t = Math.max(this.dragMargin, Math.min(mt, dy + st));\n    this.style.setProperty('--_container-drag-inline-start', `${l}px`);\n    this.style.setProperty('--_container-drag-block-start', `${t}px`);\n  }\n\n  private handleDragEnd(event: PointerEvent) {\n    if (!this.dragging) {\n      return;\n    }\n    this.containerElement?.releasePointerCapture(event.pointerId);\n    this.dragging = false;\n    this.dragInfo = undefined;\n  }\n}\n", "/**\n  * @license\n  * Copyright 2022 Google LLC\n  * SPDX-License-Identifier: Apache-2.0\n  */\n import {css} from 'lit';\n export const styles = css`:host{--_container-color: var(--md-dialog-container-color, var(--md-sys-color-surface-container-high, #ece6f0));--_container-elevation: var(--md-dialog-container-elevation, 3);--_container-shape: var(--md-dialog-container-shape, 28px);--_headline-color: var(--md-dialog-headline-color, var(--md-sys-color-on-surface, #1d1b20));--_headline-type: var(--md-dialog-headline-type, var(--md-sys-typescale-headline-small, 400 1.5rem / 2rem var(--md-ref-typeface-brand, Roboto)));--_supporting-text-color: var(--md-dialog-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_supporting-text-type: var(--md-dialog-supporting-text-type, 400 0.875rem / 1.25rem var(--md-ref-typeface-plain, Roboto));--_icon-color: var(--md-dialog-icon-color, var(--md-sys-color-secondary, #625b71));--_icon-size: var(--md-dialog-icon-size, 24px);--_container-max-inline-size: var(--md-dialog-container-max-inline-size, min(560px, 100% - 48px));--_container-min-inline-size: var(--md-dialog-container-min-inline-size, 280px);--_container-max-block-size: var(--md-dialog-container-max-block-size, min(560px, 100% - 48px));--_container-min-block-size: var(--md-dialog-container-min-block-size, 140px);--_container-inset-inline-start: var(--md-dialog-container-inset-inline-start, auto);--_container-inset-inline-end: var(--md-dialog-container-inset-inline-end, auto);--_container-inset-block-start: var(--md-dialog-container-inset-block-start, auto);--_container-inset-block-end: var(--md-dialog-container-inset-block-end, auto);--_opening-transition-duration: var(--md-dialog-opening-transition-duration, 400ms);--_opening-transition-easing: var(--md-dialog-opening-transition-easing, cubic-bezier(0.05, 0.7, 0.1, 1));--_closing-transition-duration: var(--md-dialog-closing-transition-duration, 200ms);--_closing-transition-easing: var(--md-dialog-closing-transition-easing, cubic-bezier(0.3, 0, 0.8, 0.15));--_scrim-color: var(--md-dialog-scrim-color, rgba(0, 0, 0, 0.32));--_container-block-padding: var(--md-dialog-container-block-padding, 24px);--_container-inline-padding: var(--md-dialog-container-inline-padding, 24px);--_header-spacing: var(--md-dialog-header-spacing, 16px);--_action-spacing: var(--md-dialog-action-spacing, 8px);--_content-block-start-spacing: var(--md-dialog-content-block-start-spacing, 16px);--_content-block-end-spacing: var(--md-dialog-content-block-end-spacing, 24px);--_with-divider-divider-height: var(--md-dialog-with-divider-divider-height, 1px);--_with-divider-divider-color: var(--md-dialog-with-divider-divider-color, var(--md-sys-color-outline, #79747e));--_fullscreen-header-block-size: var(--md-dialog-fullscreen-header-block-size, 56px);--_fullscreen-footer-block-size: var(--md-dialog-fullscreen-footer-block-size, 56px);--_fullscreen-container-block-padding: var(--md-dialog-fullscreen-container-block-padding, 8px);--_container-drag-inline-start: initial;--_container-drag-block-start: initial}@media(prefers-reduced-motion: reduce){:host{--_opening-transition-duration: 0;--_closing-transition-duration: 0}}.dialog{position:fixed;align-items:center;justify-content:center;box-sizing:border-box;inset:0;block-size:100dvh;inline-size:100dvw;max-block-size:100dvh;max-inline-size:100dvw;border:none;background:rgba(0,0,0,0);padding:0;margin:0;overflow:clip}.dialog:not(:modal){z-index:10000;pointer-events:none}.dialog[open]{display:flex}.dialog::backdrop{background:none}.dialog::before{content:\"\";position:absolute;z-index:-1;inset:0;block-size:100dvh;inline-size:100dvw;pointer-events:none}:host([modeless]) .dialog:before{display:none}.container{position:absolute;inset-inline-start:var(--_container-drag-inline-start, var(--_container-inset-inline-start));inset-inline-end:var(--_container-inset-inline-end);inset-block-start:var(--_container-drag-block-start, var(--_container-inset-block-start));inset-block-end:var(--_container-inset-block-end);background-color:var(--_container-color);border-radius:var(--_container-shape);display:flex;flex-direction:column;box-sizing:border-box;pointer-events:auto;min-block-size:var(--_container-min-block-size);max-block-size:var(--_container-max-block-size);min-inline-size:var(--_container-min-inline-size);max-inline-size:var(--_container-max-inline-size);padding-block-start:var(--_container-block-padding);padding-block-end:var(--_container-block-padding)}md-elevation{--md-elevation-level:var(--_container-elevation)}.container>*{box-sizing:border-box;padding-inline-start:var(--_container-inline-padding);padding-inline-end:var(--_container-inline-padding)}.header{display:flex;flex-direction:column;align-items:center;gap:var(--_header-spacing);-webkit-font-smoothing:antialiased;color:var(--_headline-color);font:var(--_headline-type)}.content{flex:1;overflow:auto;margin-block-start:var(--_content-block-start-spacing);margin-block-end:var(--_content-block-end-spacing);-webkit-font-smoothing:antialiased;color:var(--_supporting-text-color);font:var(--_supporting-text-type)}.footer{display:flex;position:relative;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;gap:var(--_action-spacing)}.footerHidden{--_content-block-end-spacing: 0px}.footerHidden .footer{display:none}.stacked .footer{flex-direction:column;align-items:flex-end}.scrollable .content{border-block-start:var(--_with-divider-divider-height) solid rgba(0,0,0,0);border-block-end:var(--_with-divider-divider-height) solid rgba(0,0,0,0)}.scroll-divider-header .content{border-block-start-color:var(--_with-divider-divider-color)}.scroll-divider-footer:not(.footerHidden) .content{border-block-end-color:var(--_with-divider-divider-color)}.dragging{user-select:none;cursor:move;touch-action:none}.container{will-change:transform,opacity;transition-property:transform;overflow:hidden}.container>*{transition-timing-function:inherit;transition-duration:inherit;transition-property:opacity,transform;will-change:transform,opacity;opacity:0}:host([transition][showing-open]) .container>*{opacity:1;transform:none}:host([transition][showing-open]) .container{opacity:1;transform:none}.dialog::before{transition:background-color linear;background-color:rgba(0,0,0,0)}:host([showing-open]) .dialog::before{background-color:var(--_scrim-color)}:host([opening]) .dialog::before{transition-duration:calc(var(--_opening-transition-duration)/2)}:host([closing]) .dialog::before{transition-duration:calc(var(--_closing-transition-duration)/2)}:host([opening]) .container{transition-duration:var(--_opening-transition-duration);transition-timing-function:var(--_opening-transition-easing)}:host([closing]) .container{transition-duration:var(--_closing-transition-duration);transition-timing-function:var(--_closing-transition-easing)}:host([trasition][closing]) .container>*{transform:none;opacity:0}:host([transition=grow-down]){--_opening-transform: scale(1, 0.1) translateY(-20%);--_closing-transform: scale(1, 0.9) translateY(-10%);--_origin: top;--_opening-content-transform: scale(1, 2);--_origin-footer: bottom}:host([transition=grow-up]){--_opening-transform: scale(1, 0.1) translateY(20%);--_closing-transform: scale(1, 0.9) translateY(10%);--_origin: bottom;--_opening-content-transform: scale(1, 2);--_origin-footer: bottom}:host([transition=grow-left]){--_opening-transform: scale(0.1, 1) translateX(20%);--_closing-transform: scale(0.9, 1) translateX(10%);--_origin: right;--_opening-content-transform: none;--_origin-footer: none}:host([transition=grow-right]){--_opening-transform: scale(0.1, 1) translateX(-20%);--_closing-transform: scale(0.9, 1) translateX(-10%);--_origin: left;--_opening-content-transform: none;--_origin-footer: none}:host([transition^=grow-]) .container{transform-origin:var(--_origin);transform:var(--_opening-transform)}:host([transition^=grow-]) .container>*{transform-origin:var(--_origin);transform:var(--_opening-content-transform)}:host([transition^=grow-]) .footer{transform-origin:var(--_origin-footer)}:host([transition^=grow-][closing]){transform:var(--_closing-transform)}:host([transition=shrink]) .container{transform:scale(1.2)}:host([transition=grow]) .container{transform:scale(0.8)}:host([transition=shrink][closing]) .container,:host([transition=grow][closing]) .container{transition-duration:0;transform:none}:host([showing-fullscreen]){--_container-max-block-size: none;--_container-max-inline-size: none}:host([showing-fullscreen]) .container{block-size:100dvh;inline-size:100dvw;border-radius:0px;padding-block-start:0;padding-block-end:0}:host([showing-fullscreen]) .header{justify-content:space-between;flex-direction:row;max-block-size:var(--_fullscreen-header-block-size);padding-block-start:var(--_fullscreen-container-block-padding);padding-inline:4px;--_header-spacing: 4px}:host([showing-fullscreen]) .content{margin-block-start:0;margin-block-end:0}:host([showing-fullscreen]) .footer{max-block-size:var(--_fullscreen-footer-block-size);padding-block-end:var(--_fullscreen-container-block-padding)}:host([showing-fullscreen]) .scroll-divider-footer .content{border-block-end-color:rgba(0,0,0,0)}@media screen and (forced-colors: active),(-ms-high-contrast: active){.container{outline:windowtext solid 2px}}[name=headline-prefix]::slotted(*),[name=headline-suffix]::slotted(*){color:var(--_icon-color);font-size:var(--_icon-size)}[name=header]::slotted(*){flex:1;align-self:stretch;display:flex;align-items:center}:host([showing-fullscreen]) [name=headline]::slotted(*){flex:1}/*# sourceMappingURL=dialog-styles.css.map */\n`;\n ", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {customElement} from 'lit/decorators.js';\n\nimport {Dialog} from './internal/dialog.js';\nimport {styles} from './internal/dialog-styles.css.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'md-dialog': MdDialog;\n  }\n}\n\n/**\n * @summary Dialogs can require an action, communicate information, or help\n * users accomplish a task. There are two types of dialogs: basic and\n * full-screen.\n *\n * @description\n * A dialog is a modal window that appears in front of app content to provide\n * critical information or ask for a decision. Dialogs disable all app\n * functionality when they appear, and remain on screen until confirmed,\n * dismissed, or a required action has been taken.\n *\n * Dialogs are purposefully interruptive, so they should be used sparingly.\n * A less disruptive alternative is to use a menu, which provides options\n * without interrupting a user’s experience.\n *\n * On mobile devices only, complex dialogs should be displayed fullscreen.\n *\n * __Example usages:__\n * - Common use cases for basic dialogs include alerts, quick selection, and\n * confirmation.\n * - More complex dialogs may contain actions that require a series of tasks\n * to complete. One example is creating a calendar entry with the event title,\n * date, location, and time.\n */\n@customElement('md-dialog')\nexport class MdDialog extends Dialog {\n  static override styles = [styles];\n}\n"],
  "mappings": "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",
  "names": ["MdDialog"]
}
