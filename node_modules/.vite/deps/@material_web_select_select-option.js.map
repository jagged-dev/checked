{
  "version": 3,
  "sources": ["../../@material/web/select/internal/selectoption/select-option.ts", "../../@material/web/select/select-option.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {PropertyValues} from 'lit';\nimport {property} from 'lit/decorators.js';\n\nimport {ListItemRole, MenuItemEl} from '../../../menu/internal/menuitem/menu-item.js';\nimport {RequestDeselectionEvent, RequestSelectionEvent, SelectOption} from '../shared.js';\n\n/**\n * @fires close-menu {CloseMenuEvent} Closes the encapsulating menu on\n * @fires request-selection {RequestSelectionEvent} Requests the parent\n * md-select to select this element (and deselect others if single-selection)\n * when `selected` changed to `true`.\n * @fires request-deselection {RequestDeselectionEvent} Requests the parent\n * md-select to deselect this element when `selected` changed to `false`.\n */\nexport class SelectOptionEl extends MenuItemEl implements SelectOption {\n  /**\n   * Form value of the option.\n   */\n  @property() value = '';\n\n  /**\n   * Whether or not this option is selected.\n   */\n  @property({type: Boolean, reflect: true}) selected = false;\n\n  override readonly type: ListItemRole = 'option';\n\n  override willUpdate(changed: PropertyValues<this>) {\n    if (changed.has('selected')) {\n      // Synchronize selected -> active but not the other way around because\n      // active is used for keyboard navigation and doesn't mean the option\n      // should be selected if active.\n      this.active = this.selected;\n      this.ariaSelected = this.selected ? 'true' : 'false';\n      // By default active = true focuses the element. We want to prevent that\n      // in this case because we set active = this.selected and that may mess\n      // around with menu's restore focus function once the menu closes.\n      this.focusOnActivation = false;\n    }\n\n    super.willUpdate(changed);\n  }\n\n  override updated(changed: PropertyValues<this>) {\n    super.updated(changed);\n    // Restore the active = true focusing behavior which happens in\n    // super.updated() if it was turned off.\n    this.focusOnActivation = true;\n\n    // Do not dispatch event on first update / boot-up.\n    if (changed.has('selected') && changed.get('selected') !== undefined) {\n      // This section is really useful for when the user sets selected on the\n      // option programmatically. Most other cases (click and keyboard) are\n      // handled by md-select because it needs to coordinate the\n      // single-selection behavior.\n      if (this.selected) {\n        this.dispatchEvent(new RequestSelectionEvent());\n      } else {\n        this.dispatchEvent(new RequestDeselectionEvent());\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {customElement} from 'lit/decorators.js';\n\nimport {styles as listItemForcedColorsStyles} from '../list/internal/listitem/forced-colors-styles.css.js';\nimport {styles as listItemStyles} from '../list/internal/listitem/list-item-styles.css.js';\nimport {styles as forcedColorsStyles} from '../menu/internal/menuitem/forced-colors-styles.css.js';\nimport {styles} from '../menu/internal/menuitem/menu-item-styles.css.js';\n\n// TODO(b/236285090): update with HCM best practices\nimport {SelectOptionEl} from './internal/selectoption/select-option.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'md-select-option': MdSelectOption;\n  }\n}\n\n/**\n * @summary\n * Select menus display a list of choices on temporary surfaces and display the\n * currently selected menu item above the menu.\n *\n * @description\n * The select component allows users to choose a value from a fixed list of\n * available options. Composed of an interactive anchor button and a menu, it is\n * analogous to the native HTML `<select>` element. This is the option that\n * can be placed inside of an md-select.\n *\n * This component is a subclass of `md-menu-item` and can accept the same slots,\n * properties, and events as `md-menu-item`.\n *\n * @example\n * ```html\n * <md-outlined-select label=\"fruits\">\n *   <!-- An empty selected option will give select an \"un-filled\" state -->\n *   <md-select-option selected></md-select-option>\n *   <md-select-option value=\"apple\" headline=\"Apple\"></md-select-option>\n *   <md-select-option value=\"banana\" headline=\"Banana\"></md-select-option>\n *   <md-select-option value=\"kiwi\" headline=\"Kiwi\"></md-select-option>\n *   <md-select-option value=\"orange\" headline=\"Orange\"></md-select-option>\n *   <md-select-option value=\"tomato\" headline=\"Tomato\"></md-select-option>\n * </md-outlined-select>\n * ```\n *\n * @final\n * @suppress {visibility}\n */\n@customElement('md-select-option')\nexport class MdSelectOption extends SelectOptionEl {\n  static override styles =\n      [listItemStyles, styles, listItemForcedColorsStyles, forcedColorsStyles];\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBM,IAAO,iBAAP,cAA8B,WAAU;EAA9C,cAAA;;AAIc,SAAA,QAAQ;AAKsB,SAAA,WAAW;AAEnC,SAAA,OAAqB;EAqCzC;EAnCW,WAAW,SAA6B;AAC/C,QAAI,QAAQ,IAAI,UAAU,GAAG;AAI3B,WAAK,SAAS,KAAK;AACnB,WAAK,eAAe,KAAK,WAAW,SAAS;AAI7C,WAAK,oBAAoB;;AAG3B,UAAM,WAAW,OAAO;EAC1B;EAES,QAAQ,SAA6B;AAC5C,UAAM,QAAQ,OAAO;AAGrB,SAAK,oBAAoB;AAGzB,QAAI,QAAQ,IAAI,UAAU,KAAK,QAAQ,IAAI,UAAU,MAAM,QAAW;AAKpE,UAAI,KAAK,UAAU;AACjB,aAAK,cAAc,IAAI,sBAAqB,CAAE;aACzC;AACL,aAAK,cAAc,IAAI,wBAAuB,CAAE;;;EAGtD;;AA3CY,WAAA;EAAX,SAAQ;;AAKiC,WAAA;EAAzC,SAAS,EAAC,MAAM,SAAS,SAAS,KAAI,CAAC;;;;ACwBnC,IAAM,iBAAN,MAAMA,wBAAuB,eAAc;;AAChC,eAAA,SACZ,CAACC,SAAgBA,SAAQ,QAA4BA,OAAkB;AAFhE,iBAAc,WAAA;EAD1B,cAAc,kBAAkB;GACpB,cAAc;",
  "names": ["MdSelectOption", "styles"]
}
