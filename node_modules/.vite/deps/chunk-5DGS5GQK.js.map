{
  "version": 3,
  "sources": ["../../@material/web/select/internal/shared-styles.css.ts", "../../@material/web/select/internal/select.ts"],
  "sourcesContent": ["/**\n  * @license\n  * Copyright 2022 Google LLC\n  * SPDX-License-Identifier: Apache-2.0\n  */\n import {css} from 'lit';\n export const styles = css`:host{color:unset;min-width:210px}.field{cursor:default;outline:none}.select{position:relative}.field,.select,md-menu{min-width:inherit;width:inherit;max-width:inherit}.field,.select{width:100%}:host{display:inline-flex}:host([disabled]){pointer-events:none}/*# sourceMappingURL=shared-styles.css.map */\n`;\n ", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../menu/menu.js';\n\nimport {html, LitElement, PropertyValues} from 'lit';\nimport {property, query, queryAssignedElements, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {html as staticHtml, StaticValue} from 'lit/static-html.js';\n\nimport {Field} from '../../field/internal/field.js';\nimport {List} from '../../list/internal/list.js';\nimport {DEFAULT_TYPEAHEAD_BUFFER_TIME, Menu} from '../../menu/internal/menu.js';\nimport {DefaultCloseMenuEvent, isElementInSubtree, isSelectableKey} from '../../menu/internal/shared.js';\nimport {TYPEAHEAD_RECORD} from '../../menu/internal/typeaheadController.js';\n\nimport {getSelectedItems, RequestDeselectionEvent, RequestSelectionEvent, SelectOption, SelectOptionRecord} from './shared.js';\n\nconst VALUE = Symbol('value');\n\n/**\n * @fires input Fired when a selection is made by the user via mouse or keyboard\n * interaction.\n * @fires change Fired when a selection is made by the user via mouse or\n * keyboard interaction.\n */\nexport abstract class Select extends LitElement {\n  /**\n   * Opens the menu synchronously with no animation.\n   */\n  @property({type: Boolean}) quick = false;\n  /**\n   * Whether or not the select is required.\n   */\n  @property({type: Boolean}) required = false;\n  /**\n   * Disables the select.\n   */\n  @property({type: Boolean, reflect: true}) disabled = false;\n  /**\n   * The error message that replaces supporting text when `error` is true. If\n   * `errorText` is an empty string, then the supporting text will continue to\n   * show.\n   *\n   * Calling `reportValidity()` will automatically update `errorText` to the\n   * native `validationMessage`.\n   */\n  @property({type: String, attribute: 'error-text'}) errorText = '';\n  /**\n   * The floating label for the field.\n   */\n  @property() label = '';\n  /**\n   * Conveys additional information below the text field, such as how it should\n   * be used.\n   */\n  @property({type: String, attribute: 'supporting-text'}) supportingText = '';\n  /**\n   * Gets or sets whether or not the text field is in a visually invalid state.\n   *\n   * Calling `reportValidity()` will automatically update `error`.\n   */\n  @property({type: Boolean, reflect: true}) error = false;\n  /**\n   * Whether or not the underlying md-menu should be position: fixed to display\n   * in a top-level manner.\n   */\n  @property({type: Boolean, attribute: 'menu-fixed'}) menuFixed = false;\n  /**\n   * The max time between the keystrokes of the typeahead select / menu behavior\n   * before it clears the typeahead buffer.\n   */\n  @property({type: Number, attribute: 'typeahead-delay'})\n  typeaheadDelay = DEFAULT_TYPEAHEAD_BUFFER_TIME;\n  /**\n   * Whether or not the text field has a leading icon. Used for SSR.\n   */\n  @property({type: Boolean, attribute: 'has-leading-icon'})\n  hasLeadingIcon = false;\n  /**\n   * Whether or not the text field has a trailing icon. Used for SSR.\n   */\n  @property({type: Boolean, attribute: 'has-trailing-icon'})\n  hasTrailingIcon = false;\n  /**\n   * Text to display in the field. Only set for SSR.\n   */\n  @property({attribute: 'display-text'}) displayText = '';\n\n  @state() private focused = false;\n  @state() private open = false;\n  @query('.field') private readonly field!: Field|null;\n  @query('md-menu') private readonly menu!: Menu|null;\n  @queryAssignedElements({slot: 'leadingicon', flatten: true})\n  private readonly leadingIcons!: Element[];\n  @queryAssignedElements({slot: 'trailingicon', flatten: true})\n  private readonly trailingIcons!: Element[];\n\n  /**\n   * The value of the currently selected option.\n   *\n   * Note: For SSR, set `[selected]` on the requested option and `displayText`\n   * rather than setting `value` setting `value` will incur a DOM query.\n   */\n  @property()\n  get value(): string {\n    return this[VALUE];\n  }\n\n  set value(value: string) {\n    this.lastUserSetValue = value;\n    this.select(value);\n  }\n\n  [VALUE] = '';\n\n  get options() {\n    // NOTE: this does a DOM query.\n    return (this.menu?.items ?? []) as SelectOption[];\n  }\n\n  /**\n   * The index of the currently selected option.\n   *\n   * Note: For SSR, set `[selected]` on the requested option and `displayText`\n   * rather than setting `selectedIndex` setting `selectedIndex` will incur a\n   * DOM query.\n   */\n  @property({type: Number, attribute: 'selected-index'})\n  get selectedIndex(): number {\n    // tslint:disable-next-line:enforce-name-casing\n    const [_option, index] = (this.getSelectedOptions() ?? [])[0] ?? [];\n    return index ?? -1;\n  }\n\n  set selectedIndex(index: number) {\n    this.lastUserSetSelectedIndex = index;\n    this.selectIndex(index);\n  }\n\n  /**\n   * Returns an array of selected options.\n   *\n   * NOTE: md-select only suppoprts single selection.\n   */\n  get selectedOptions() {\n    return (this.getSelectedOptions() ?? []).map(([option]) => option);\n  }\n\n  protected abstract readonly fieldTag: StaticValue;\n\n  /**\n   * Used for initializing select when the user sets the `value` directly.\n   */\n  private lastUserSetValue: string|null = null;\n\n  /**\n   * Used for initializing select when the user sets the `selectedIndex`\n   * directly.\n   */\n  private lastUserSetSelectedIndex: number|null = null;\n\n  /**\n   * Used for `input` and `change` event change detection.\n   */\n  private lastSelectedOption: SelectOption|null = null;\n\n  // tslint:disable-next-line:enforce-name-casing\n  private lastSelectedOptionRecords: SelectOptionRecord[] = [];\n\n  protected override render() {\n    return html`\n      <span\n          class=\"select ${classMap(this.getRenderClasses())}\"\n          @focusout=${this.handleFocusout}>\n        ${this.renderField()}\n        ${this.renderMenu()}\n      </span>\n    `;\n  }\n\n  private getRenderClasses() {\n    return {\n      'disabled': this.disabled,\n      'error': this.error,\n    };\n  }\n\n  private renderField() {\n    // TODO(b/290078041): add aria-label/describedby\n    return staticHtml`\n      <${this.fieldTag}\n          aria-haspopup=\"listbox\"\n          role=\"combobox\"\n          part=\"field\"\n          tabindex=${this.disabled ? '-1' : '0'}\n          aria-expanded=${this.open ? 'true' : 'false'}\n          class=\"field\"\n          label=${this.label}\n          .focused=${this.focused || this.open}\n          .populated=${!!this.displayText}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          .error=${this.error}\n          .hasStart=${this.hasLeadingIcon}\n          .hasEnd=${this.hasTrailingIcon}\n          supporting-text=${this.supportingText}\n          error-text=${this.errorText}\n          @keydown =${this.handleKeydown}\n          @click=${this.handleClick}\n          @focus=${this.handleFocus}\n          @blur=${this.handleBlur}>\n        ${this.renderFieldContent()}\n      </${this.fieldTag}>`;\n  }\n\n  private renderFieldContent() {\n    return [\n      this.renderLeadingIcon(),\n      this.renderLabel(),\n      this.renderTrailingIcon(),\n    ];\n  }\n\n  private renderLeadingIcon() {\n    return html`\n      <span class=\"icon leading\" slot=\"start\">\n         <slot name=\"leadingicon\" @slotchange=${this.handleIconChange}></slot>\n      </span>\n     `;\n  }\n\n  private renderTrailingIcon() {\n    return html`\n      <span class=\"icon trailing\" slot=\"end\">\n         <slot name=\"trailingicon\" @slotchange=${this.handleIconChange}></slot>\n      </span>\n     `;\n  }\n\n  private renderLabel() {\n    // need to render &nbsp; so that line-height can apply and give it a\n    // non-zero height\n    return html`<div id=\"label\">${this.displayText || html`&nbsp;`}</div>`;\n  }\n\n  private renderMenu() {\n    return html`\n      <md-menu\n          id=\"listbox\"\n          default-focus=\"NONE\"\n          listTabIndex=\"-1\"\n          type=\"listbox\"\n          stay-open-on-focusout\n          part=\"menu\"\n          exportparts=\"focus-ring: menu-focus-ring\"\n          .anchor=${this.field}\n          .open=${this.open}\n          .quick=${this.quick}\n          .fixed=${this.menuFixed}\n          .typeaheadDelay=${this.typeaheadDelay}\n          @opening=${this.handleOpening}\n          @closing=${this.handleClosing}\n          @close-menu=${this.handleCloseMenu}\n          @request-selection=${this.handleRequestSelection}\n          @request-deselection=${this.handleRequestDeselection}>\n        ${this.renderMenuContent()}\n      </md-menu>`;\n  }\n\n  private renderMenuContent() {\n    return html`<slot></slot>`;\n  }\n\n  /**\n   * Handles opening the select on keydown and typahead selection when the menu\n   * is closed.\n   */\n  private handleKeydown(event: KeyboardEvent) {\n    if (this.open || this.disabled || !this.menu) {\n      return;\n    }\n\n    const typeaheadController = this.menu.typeaheadController;\n    const isOpenKey = event.code === 'Space' || event.code === 'ArrowDown' ||\n        event.code === 'Enter';\n\n    // Do not open if currently typing ahead because the user may be typing the\n    // spacebar to match a word with a space\n    if (!typeaheadController.isTypingAhead && isOpenKey) {\n      event.preventDefault();\n      this.open = true;\n      return;\n    }\n\n    const isPrintableKey = event.key.length === 1;\n\n    // Handles typing ahead when the menu is closed by delegating the event to\n    // the underlying menu's typeaheadController\n    if (isPrintableKey) {\n      typeaheadController.onKeydown(event);\n      event.preventDefault();\n\n      const {lastActiveRecord} = typeaheadController;\n\n      if (!lastActiveRecord) {\n        return;\n      }\n\n      const hasChanged = this.selectItem(\n          lastActiveRecord[TYPEAHEAD_RECORD.ITEM] as SelectOption);\n\n      if (hasChanged) {\n        this.dispatchInteractionEvents();\n      }\n    }\n  }\n\n  private handleClick() {\n    this.open = true;\n  }\n\n  private handleFocus() {\n    this.focused = true;\n  }\n\n  private handleBlur() {\n    this.focused = false;\n  }\n\n  /**\n   * Handles closing the menu when the focus leaves the select's subtree.\n   */\n  private handleFocusout(event: FocusEvent) {\n    // Don't close the menu if we are switching focus between menu,\n    // select-option, and field\n    if (event.relatedTarget && isElementInSubtree(event.relatedTarget, this)) {\n      return;\n    }\n\n    this.open = false;\n  }\n\n  /**\n   * Gets a list of all selected select options as a list item record array.\n   *\n   * @return An array of selected list option records.\n   */\n  private getSelectedOptions() {\n    if (!this.menu) {\n      this.lastSelectedOptionRecords = [];\n      return null;\n    }\n\n    const items = this.menu.items as SelectOption[];\n    this.lastSelectedOptionRecords = getSelectedItems(items);\n    return this.lastSelectedOptionRecords;\n  }\n\n  override async getUpdateComplete() {\n    await this.menu?.updateComplete;\n    return super.getUpdateComplete();\n  }\n\n  /**\n   * Gets the selected options from the DOM, and updates the value and display\n   * text to the first selected option's value and headline respectively.\n   *\n   * @return Whether or not the selected option has changed since last update.\n   */\n  private updateValueAndDisplayText() {\n    const selectedOptions = this.getSelectedOptions() ?? [];\n    // Used to determine whether or not we need to fire an input / change event\n    // which fire whenever the option element changes (value or selectedIndex)\n    // on user interaction.\n    let hasSelectedOptionChanged = false;\n\n    if (selectedOptions.length) {\n      const [firstSelectedOption] = selectedOptions[0];\n      hasSelectedOptionChanged =\n          this.lastSelectedOption !== firstSelectedOption;\n      this.lastSelectedOption = firstSelectedOption;\n      this[VALUE] = firstSelectedOption.value;\n      this.displayText = firstSelectedOption.headline;\n\n    } else {\n      hasSelectedOptionChanged = this.lastSelectedOption !== null;\n      this.lastSelectedOption = null;\n      this[VALUE] = '';\n      this.displayText = '';\n    }\n\n    return hasSelectedOptionChanged;\n  }\n\n  protected override update(changed: PropertyValues<this>) {\n    // In SSR the options will be ready to query, so try to figure out what\n    // the value and display text should be.\n    if (!this.hasUpdated) {\n      this.initUserSelection();\n    }\n\n    super.update(changed);\n  }\n\n  protected override async firstUpdated(changed: PropertyValues<this>) {\n    await this.menu?.updateComplete;\n    // If this has been handled on update already due to SSR, try again.\n    if (!this.lastSelectedOptionRecords.length) {\n      this.initUserSelection();\n    }\n\n    super.firstUpdated(changed);\n  }\n\n  /**\n   * Focuses and activates the last selected item upon opening, and resets other\n   * active items.\n   */\n  private async handleOpening() {\n    const items = this.menu!.items;\n    const activeItem = List.getActiveItem(items)?.item;\n    const [selectedItem] = this.lastSelectedOptionRecords[0] ?? [null];\n\n    // This is true if the user keys through the list but clicks out of the menu\n    // thus no close-menu event is fired by an item and we can't clean up in\n    // handleCloseMenu.\n    if (activeItem && activeItem !== selectedItem) {\n      activeItem.active = false;\n    }\n\n    if (selectedItem) {\n      selectedItem.active = true;\n      selectedItem.focus();\n    }\n  }\n\n  private handleClosing() {\n    this.open = false;\n  }\n\n  /**\n   * Determines the reason for closing, and updates the UI accordingly.\n   */\n  private handleCloseMenu(event: InstanceType<typeof DefaultCloseMenuEvent>) {\n    const reason = event.reason;\n    const item = event.itemPath[0] as SelectOption;\n    this.open = false;\n    let hasChanged = false;\n\n    if (reason.kind === 'CLICK_SELECTION') {\n      hasChanged = this.selectItem(item);\n    } else if (reason.kind === 'KEYDOWN' && isSelectableKey(reason.key)) {\n      hasChanged = this.selectItem(item);\n    } else {\n      // This can happen on ESC being pressed\n      item.active = false;\n      item.blur();\n    }\n\n    // Dispatch interaction events since selection has been made via keyboard\n    // or mouse.\n    if (hasChanged) {\n      this.dispatchInteractionEvents();\n    }\n  }\n\n  /**\n   * Selects a given option, deselects other options, and updates the UI.\n   *\n   * @return Whether the last selected option has changed.\n   */\n  private selectItem(item: SelectOption) {\n    this.lastSelectedOptionRecords.forEach(([option]) => {\n      if (item !== option) {\n        option.selected = false;\n      }\n    });\n    item.selected = true;\n\n    return this.updateValueAndDisplayText();\n  }\n\n  /**\n   * Handles updating selection when an option element requests selection via\n   * property / attribute change.\n   */\n  private handleRequestSelection(event: RequestSelectionEvent) {\n    const requestingOptionEl = event.target as SelectOption & HTMLElement;\n\n    // No-op if this item is already selected.\n    if (this.lastSelectedOptionRecords.some(\n            ([option]) => option === requestingOptionEl)) {\n      return;\n    }\n\n    this.selectItem(requestingOptionEl);\n  }\n\n  /**\n   * Handles updating selection when an option element requests deselection via\n   * property / attribute change.\n   */\n  private handleRequestDeselection(event: RequestDeselectionEvent) {\n    const requestingOptionEl = event.target as SelectOption & HTMLElement;\n\n    // No-op if this item is not even in the list of tracked selected items.\n    if (!this.lastSelectedOptionRecords.some(\n            ([option]) => option === requestingOptionEl)) {\n      return;\n    }\n\n    this.updateValueAndDisplayText();\n  }\n\n  /**\n   * Selects an option given the value of the option, and updates MdSelect's\n   * value.\n   */\n  select(value: string) {\n    const optionToSelect = this.options.find(option => option.value === value);\n    if (optionToSelect) {\n      this.selectItem(optionToSelect);\n    }\n  }\n\n  /**\n   * Selects an option given the index of the option, and updates MdSelect's\n   * value.\n   */\n  selectIndex(index: number) {\n    const optionToSelect = this.options[index];\n    if (optionToSelect) {\n      this.selectItem(optionToSelect);\n    }\n  }\n\n  /**\n   * Attempts to initialize the selected option from user-settable values like\n   * SSR, setting `value`, or `selectedIndex` at startup.\n   */\n  private initUserSelection() {\n    // User has set `.value` directly, but internals have not yet booted up.\n    if (this.lastUserSetValue && !this.lastSelectedOptionRecords.length) {\n      this.select(this.lastUserSetValue);\n\n      // User has set `.selectedIndex` directly, but internals have not yet\n      // booted up.\n    } else if (\n        this.lastUserSetSelectedIndex !== null &&\n        !this.lastSelectedOptionRecords.length) {\n      this.selectIndex(this.lastUserSetSelectedIndex);\n\n      // Regular boot up!\n    } else {\n      this.updateValueAndDisplayText();\n    }\n  }\n\n  private handleIconChange() {\n    this.hasLeadingIcon = this.leadingIcons.length > 0;\n    this.hasTrailingIcon = this.trailingIcons.length > 0;\n  }\n\n  /**\n   * Dispatches the `input` and `change` events.\n   */\n  private dispatchInteractionEvents() {\n    this.dispatchEvent(new Event('input', {bubbles: true, composed: true}));\n    this.dispatchEvent(new Event('change', {bubbles: true}));\n  }\n}\n"],
  "mappings": "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",
  "names": ["_a", "html"]
}
