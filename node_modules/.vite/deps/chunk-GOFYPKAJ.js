import {
  isServer
} from "./chunk-KGFNV5XS.js";

// node_modules/@material/web/internal/aria/aria.js
var ARIA_PROPERTIES = [
  "ariaAtomic",
  "ariaAutoComplete",
  "ariaBusy",
  "ariaChecked",
  "ariaColCount",
  "ariaColIndex",
  "ariaColSpan",
  "ariaCurrent",
  "ariaDisabled",
  "ariaExpanded",
  "ariaHasPopup",
  "ariaHidden",
  "ariaInvalid",
  "ariaKeyShortcuts",
  "ariaLabel",
  "ariaLevel",
  "ariaLive",
  "ariaModal",
  "ariaMultiLine",
  "ariaMultiSelectable",
  "ariaOrientation",
  "ariaPlaceholder",
  "ariaPosInSet",
  "ariaPressed",
  "ariaReadOnly",
  "ariaRequired",
  "ariaRoleDescription",
  "ariaRowCount",
  "ariaRowIndex",
  "ariaRowSpan",
  "ariaSelected",
  "ariaSetSize",
  "ariaSort",
  "ariaValueMax",
  "ariaValueMin",
  "ariaValueNow",
  "ariaValueText"
];
var ARIA_ATTRIBUTES = ARIA_PROPERTIES.map(ariaPropertyToAttribute);
function ariaPropertyToAttribute(property) {
  return property.replace("aria", "aria-").replace(/Elements?/g, "").toLowerCase();
}
function setupHostAria(ctor, { focusable } = {}) {
  if (focusable !== false) {
    ctor.addInitializer((host) => {
      host.addController({
        hostConnected() {
          if (host.hasAttribute("tabindex")) {
            return;
          }
          host.tabIndex = 0;
        }
      });
    });
  }
  if (isServer || "role" in Element.prototype) {
    return;
  }
  for (const ariaProperty of ARIA_PROPERTIES) {
    ctor.createProperty(ariaProperty, {
      attribute: ariaPropertyToAttribute(ariaProperty),
      reflect: true
    });
  }
  ctor.createProperty("role", { reflect: true });
}
function polyfillElementInternalsAria(host, internals) {
  if (checkIfElementInternalsSupportsAria(internals)) {
    return internals;
  }
  if (!("role" in host)) {
    throw new Error("Missing setupHostAria()");
  }
  let firstConnectedCallbacks = [];
  let hasBeenConnected = false;
  for (const ariaProperty of ARIA_PROPERTIES) {
    let internalAriaValue = null;
    Object.defineProperty(internals, ariaProperty, {
      enumerable: true,
      configurable: true,
      get() {
        return internalAriaValue;
      },
      set(value) {
        const setValue = () => {
          internalAriaValue = value;
          if (!hasBeenConnected) {
            firstConnectedCallbacks.push({ property: ariaProperty, callback: setValue });
            return;
          }
          host[ariaProperty] = value;
        };
        setValue();
      }
    });
  }
  let internalRoleValue = null;
  Object.defineProperty(internals, "role", {
    enumerable: true,
    configurable: true,
    get() {
      return internalRoleValue;
    },
    set(value) {
      const setRole = () => {
        internalRoleValue = value;
        if (!hasBeenConnected) {
          firstConnectedCallbacks.push({
            property: "role",
            callback: setRole
          });
          return;
        }
        if (value === null) {
          host.removeAttribute("role");
        } else {
          host.setAttribute("role", value);
        }
      };
      setRole();
    }
  });
  host.addController({
    hostConnected() {
      if (hasBeenConnected) {
        return;
      }
      hasBeenConnected = true;
      const propertiesSetByUser = /* @__PURE__ */ new Set();
      for (const { property } of firstConnectedCallbacks) {
        const wasSetByUser = host.getAttribute(ariaPropertyToAttribute(property)) !== null || // Dynamic lookup rather than hardcoding all properties.
        // tslint:disable-next-line:no-dict-access-on-struct-type
        host[property] !== void 0;
        if (wasSetByUser) {
          propertiesSetByUser.add(property);
        }
      }
      for (const { property, callback } of firstConnectedCallbacks) {
        if (propertiesSetByUser.has(property)) {
          continue;
        }
        callback();
      }
      firstConnectedCallbacks = [];
    }
  });
  return internals;
}
function checkIfElementInternalsSupportsAria(internals) {
  return "role" in internals;
}

export {
  ARIA_PROPERTIES,
  ariaPropertyToAttribute,
  setupHostAria,
  polyfillElementInternalsAria
};
/*! Bundled license information:

@material/web/internal/aria/aria.js:
  (**
   * @license
   * Copyright 2023 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
//# sourceMappingURL=chunk-GOFYPKAJ.js.map
