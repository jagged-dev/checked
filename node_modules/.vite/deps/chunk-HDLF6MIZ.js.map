{
  "version": 3,
  "sources": ["../../@material/web/menu/internal/shared.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ListItem} from '../../list/internal/listitem/list-item.js';\n\n/**\n * Interface specific to menu item and not list item.\n */\ninterface MenuItemSelf {\n  /**\n   * The visible headline text of the item.\n   */\n  headline: string;\n  /**\n   * Whether or not the item is the currently active item of interest (focuses\n   * upon activation).\n   */\n  active: boolean;\n  /**\n   * Whether or not the item is in the selected visual state.\n   */\n  selected?: boolean;\n  /**\n   * If it is a sub-menu-item, a method that can close the submenu.\n   */\n  close?: () => void;\n  /**\n   * Focuses the item.\n   */\n  focus: () => void;\n}\n\n/**\n * The interface of every menu item interactive with a menu. All menu items\n * should implement this interface to be compatible with md-menu. Additionally\n * they should have both the `md-menu-item` and `md-list-item` attributes set.\n */\nexport type MenuItem = MenuItemSelf&ListItem;\n\n/**\n * The reason the `close-menu` event was dispatched.\n */\nexport interface Reason {\n  kind: string;\n}\n\n/**\n * The click selection reason for the `close-menu` event. The menu was closed\n * because an item was selected via user click.\n */\nexport interface ClickReason extends Reason {\n  kind: typeof CLOSE_REASON.CLICK_SELECTION;\n}\n\n/**\n * The keydown reason for the `close-menu` event. The menu was closed\n * because a specific key was pressed. The default closing keys for\n * `md-menu-item` are, Space, Enter or Escape.\n */\nexport interface KeydownReason extends Reason {\n  kind: typeof CLOSE_REASON.KEYDOWN;\n  key: string;\n}\n\n/**\n * The default menu closing reasons for the material md-menu package.\n */\nexport type DefaultReasons = ClickReason|KeydownReason;\n\n/**\n * Creates an event that closes any parent menus.\n */\nexport function createCloseMenuEvent<T extends Reason = DefaultReasons>(\n    initiator: MenuItem, reason: T) {\n  return new CustomEvent<\n      {initiator: MenuItem, itemPath: MenuItem[], reason: T}>('close-menu', {\n    bubbles: true,\n    composed: true,\n    detail: {initiator, reason, itemPath: [initiator]}\n  });\n}\n\n/**\n * Creates an event that signals to the menu that it should stay open on the\n * focusout event.\n */\nexport function createStayOpenOnFocusoutEvent() {\n  return new Event('stay-open-on-focusout', {bubbles: true, composed: true});\n}\n\n/**\n * Creates an event that signals to the menu that it should close open on the\n * focusout event.\n */\nexport function createCloseOnFocusoutEvent() {\n  return new Event('close-on-focusout', {bubbles: true, composed: true});\n}\n\n/**\n * Creates a default close menu event used by md-menu.\n */\nexport const createDefaultCloseMenuEvent = createCloseMenuEvent<DefaultReasons>;\n\n/**\n * The type of the default close menu event used by md-menu.\n */\n// tslint:disable-next-line\nexport type CloseMenuEvent<T extends Reason = DefaultReasons> =\n    ReturnType<typeof createCloseMenuEvent<T>>;\n\n/**\n * Creates an event that requests the parent md-menu to deactivate all other\n * items.\n */\nexport function createDeactivateItemsEvent() {\n  return new Event('deactivate-items', {bubbles: true, composed: true});\n}\n\n/**\n * The type of the event that requests the parent md-menu to deactivate all\n * other items.\n */\nexport type DeactivateItemsEvent =\n    ReturnType<typeof createDeactivateItemsEvent>;\n\n\n/**\n * Creates an event that requests the typeahead functionality of containing menu\n * be deactivated.\n */\nexport function createDeactivateTypeaheadEvent() {\n  return new Event('deactivate-typeahead', {bubbles: true, composed: true});\n}\n\n/**\n * The type of the event that requests the typeahead functionality of containing\n * menu be deactivated.\n */\nexport type DeactivateTypeaheadEvent =\n    ReturnType<typeof createDeactivateTypeaheadEvent>;\n\n/**\n * Creates an event that requests the typeahead functionality of containing menu\n * be activated.\n */\nexport function createActivateTypeaheadEvent() {\n  return new Event('activate-typeahead', {bubbles: true, composed: true});\n}\n\n/**\n * The type of the event that requests the typeahead functionality of containing\n * menu be activated.\n */\nexport type ActivateTypeaheadEvent =\n    ReturnType<typeof createActivateTypeaheadEvent>;\n\n/**\n * Keys that are used to navigate menus.\n */\nexport const NAVIGABLE_KEY = {\n  UP: 'ArrowUp',\n  DOWN: 'ArrowDown',\n  RIGHT: 'ArrowRight',\n  LEFT: 'ArrowLeft',\n} as const;\n\n/**\n * Keys that are used for selection in menus.\n */\nexport const SELECTION_KEY = {\n  SPACE: 'Space',\n  ENTER: 'Enter',\n} as const;\n\n/**\n * Default close `Reason` kind values.\n */\nexport const CLOSE_REASON = {\n  CLICK_SELECTION: 'CLICK_SELECTION',\n  KEYDOWN: 'KEYDOWN',\n} as const;\n\n/**\n * Keys that can close menus.\n */\nexport const KEYDOWN_CLOSE_KEYS = {\n  ESCAPE: 'Escape',\n  SPACE: SELECTION_KEY.SPACE,\n  ENTER: SELECTION_KEY.ENTER,\n} as const;\n\ntype Values<T> = T[keyof T];\n\n/**\n * Determines whether the given key code is a key code that should close the\n * menu.\n *\n * @param code The KeyboardEvent code to check.\n * @return Whether or not the key code is in the predetermined list to close the\n * menu.\n */\nexport function isClosableKey(code: string):\n    code is Values<typeof KEYDOWN_CLOSE_KEYS> {\n  return Object.values(KEYDOWN_CLOSE_KEYS).some(value => (value === code));\n}\n\n/**\n * Determines whether the given key code is a key code that should select a menu\n * item.\n *\n * @param code They KeyboardEvent code to check.\n * @return Whether or not the key code is in the predetermined list to select a\n * menu item.\n */\nexport function isSelectableKey(code: string):\n    code is Values<typeof SELECTION_KEY> {\n  return Object.values(SELECTION_KEY).some(value => (value === code));\n}\n\n/**\n * Determines whether a target element is contained inside another element's\n * composed tree.\n *\n * @param target The potential contained element.\n * @param container The potential containing element of the target.\n * @returns Whether the target element is contained inside the container's\n * composed subtree\n */\nexport function isElementInSubtree(\n    target: EventTarget, container: EventTarget) {\n  // Dispatch a composed, bubbling event to check its path to see if the\n  // newly-focused element is contained in container's subtree\n  const focusEv = new Event('md-contains', {bubbles: true, composed: true});\n  let composedPath: EventTarget[] = [];\n  const listener = (ev: Event) => {\n    composedPath = ev.composedPath();\n  };\n\n  container.addEventListener('md-contains', listener);\n  target.dispatchEvent(focusEv);\n  container.removeEventListener('md-contains', listener);\n\n  const isContained = composedPath.length > 0;\n  return isContained;\n}\n"],
  "mappings": ";AA2EM,SAAU,qBACZ,WAAqB,QAAS;AAChC,SAAO,IAAI,YACiD,cAAc;IACxE,SAAS;IACT,UAAU;IACV,QAAQ,EAAC,WAAW,QAAQ,UAAU,CAAC,SAAS,EAAC;GAClD;AACH;AAMM,SAAU,gCAA6B;AAC3C,SAAO,IAAI,MAAM,yBAAyB,EAAC,SAAS,MAAM,UAAU,KAAI,CAAC;AAC3E;AAMM,SAAU,6BAA0B;AACxC,SAAO,IAAI,MAAM,qBAAqB,EAAC,SAAS,MAAM,UAAU,KAAI,CAAC;AACvE;AAKO,IAAM,8BAA8B;AAarC,SAAU,6BAA0B;AACxC,SAAO,IAAI,MAAM,oBAAoB,EAAC,SAAS,MAAM,UAAU,KAAI,CAAC;AACtE;AAcM,SAAU,iCAA8B;AAC5C,SAAO,IAAI,MAAM,wBAAwB,EAAC,SAAS,MAAM,UAAU,KAAI,CAAC;AAC1E;AAaM,SAAU,+BAA4B;AAC1C,SAAO,IAAI,MAAM,sBAAsB,EAAC,SAAS,MAAM,UAAU,KAAI,CAAC;AACxE;AAYO,IAAM,gBAAgB;EAC3B,IAAI;EACJ,MAAM;EACN,OAAO;EACP,MAAM;;AAMD,IAAM,gBAAgB;EAC3B,OAAO;EACP,OAAO;;AAMF,IAAM,eAAe;EAC1B,iBAAiB;EACjB,SAAS;;AAMJ,IAAM,qBAAqB;EAChC,QAAQ;EACR,OAAO,cAAc;EACrB,OAAO,cAAc;;AAajB,SAAU,cAAc,MAAY;AAExC,SAAO,OAAO,OAAO,kBAAkB,EAAE,KAAK,WAAU,UAAU,IAAK;AACzE;AAUM,SAAU,gBAAgB,MAAY;AAE1C,SAAO,OAAO,OAAO,aAAa,EAAE,KAAK,WAAU,UAAU,IAAK;AACpE;AAWM,SAAU,mBACZ,QAAqB,WAAsB;AAG7C,QAAM,UAAU,IAAI,MAAM,eAAe,EAAC,SAAS,MAAM,UAAU,KAAI,CAAC;AACxE,MAAI,eAA8B,CAAA;AAClC,QAAM,WAAW,CAAC,OAAa;AAC7B,mBAAe,GAAG,aAAY;EAChC;AAEA,YAAU,iBAAiB,eAAe,QAAQ;AAClD,SAAO,cAAc,OAAO;AAC5B,YAAU,oBAAoB,eAAe,QAAQ;AAErD,QAAM,cAAc,aAAa,SAAS;AAC1C,SAAO;AACT;",
  "names": []
}
