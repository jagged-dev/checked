// node_modules/@material/web/menu/internal/shared.js
var CloseMenuEvent = class extends Event {
  constructor(initiator, reason) {
    super("close-menu", { bubbles: true, composed: true });
    this.initiator = initiator;
    this.reason = reason;
    this.itemPath = [initiator];
  }
};
var StayOpenOnFocusoutEvent = class extends Event {
  constructor() {
    super("stay-open-on-focusout", { bubbles: true, composed: true });
  }
};
var CloseOnFocusoutEvent = class extends Event {
  constructor() {
    super("close-on-focusout", { bubbles: true, composed: true });
  }
};
var DefaultCloseMenuEvent = CloseMenuEvent;
var DeactivateItemsEvent = class extends Event {
  constructor() {
    super("deactivate-items", { bubbles: true, composed: true });
  }
};
var DeactivateTypeaheadEvent = class extends Event {
  constructor() {
    super("deactivate-typeahead", { bubbles: true, composed: true });
  }
};
var ActivateTypeaheadEvent = class extends Event {
  constructor() {
    super("activate-typeahead", { bubbles: true, composed: true });
  }
};
var NAVIGABLE_KEY = {
  UP: "ArrowUp",
  DOWN: "ArrowDown",
  RIGHT: "ArrowRight",
  LEFT: "ArrowLeft"
};
var SELECTION_KEY = {
  SPACE: "Space",
  ENTER: "Enter"
};
var CLOSE_REASON = {
  CLICK_SELECTION: "CLICK_SELECTION",
  KEYDOWN: "KEYDOWN"
};
var KEYDOWN_CLOSE_KEYS = {
  ESCAPE: "Escape",
  SPACE: SELECTION_KEY.SPACE,
  ENTER: SELECTION_KEY.ENTER
};
function isClosableKey(code) {
  return Object.values(KEYDOWN_CLOSE_KEYS).some((value) => value === code);
}
function isSelectableKey(code) {
  return Object.values(SELECTION_KEY).some((value) => value === code);
}
function isElementInSubtree(target, container) {
  const focusEv = new Event("md-contains", { bubbles: true, composed: true });
  let composedPath = [];
  const listener = (ev) => {
    composedPath = ev.composedPath();
  };
  container.addEventListener("md-contains", listener);
  target.dispatchEvent(focusEv);
  container.removeEventListener("md-contains", listener);
  const isContained = composedPath.length > 0;
  return isContained;
}

export {
  CloseMenuEvent,
  StayOpenOnFocusoutEvent,
  CloseOnFocusoutEvent,
  DefaultCloseMenuEvent,
  DeactivateItemsEvent,
  DeactivateTypeaheadEvent,
  ActivateTypeaheadEvent,
  NAVIGABLE_KEY,
  SELECTION_KEY,
  CLOSE_REASON,
  KEYDOWN_CLOSE_KEYS,
  isClosableKey,
  isSelectableKey,
  isElementInSubtree
};
/*! Bundled license information:

@material/web/menu/internal/shared.js:
  (**
   * @license
   * Copyright 2023 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
//# sourceMappingURL=chunk-V3MR2ZD3.js.map
