import {
  requestUpdateOnAriaChange
} from "./chunk-AHSTZKZK.js";
import {
  classMap
} from "./chunk-H7T7SDME.js";
import {
  LitElement,
  __decorate,
  html,
  property
} from "./chunk-5FYQN2WI.js";

// node_modules/@material/web/chips/internal/chip.js
var Chip = class extends LitElement {
  constructor() {
    super(...arguments);
    this.disabled = false;
    this.alwaysFocusable = false;
    this.label = "";
  }
  /**
   * Whether or not the primary ripple is disabled (defaults to `disabled`).
   * Some chip actions such as links cannot be disabled.
   */
  get rippleDisabled() {
    return this.disabled;
  }
  focus(options) {
    if (this.disabled && !this.alwaysFocusable) {
      return;
    }
    super.focus(options);
  }
  render() {
    return html`
      <div class="container ${classMap(this.getContainerClasses())}">
        ${this.renderContainerContent()}
      </div>
    `;
  }
  updated(changed) {
    if (changed.has("disabled") && changed.get("disabled") !== void 0) {
      this.dispatchEvent(new Event("update-focus", { bubbles: true }));
    }
  }
  getContainerClasses() {
    return {
      "disabled": this.disabled
    };
  }
  renderContainerContent() {
    return html`
      ${this.renderOutline()}
      <md-focus-ring part="focus-ring"
          for=${this.primaryId}></md-focus-ring>
      <md-ripple for=${this.primaryId}
          ?disabled=${this.rippleDisabled}></md-ripple>
      ${this.renderPrimaryAction(this.renderPrimaryContent())}
    `;
  }
  renderOutline() {
    return html`<span class="outline"></span>`;
  }
  renderLeadingIcon() {
    return html`<slot name="icon"></slot>`;
  }
  renderPrimaryContent() {
    return html`
      <span class="leading icon" aria-hidden="true">
        ${this.renderLeadingIcon()}
      </span>
      <span class="label">${this.label}</span>
      <span class="touch"></span>
    `;
  }
};
(() => {
  requestUpdateOnAriaChange(Chip);
})();
Chip.shadowRootOptions = {
  ...LitElement.shadowRootOptions,
  delegatesFocus: true
};
__decorate([
  property({ type: Boolean })
], Chip.prototype, "disabled", void 0);
__decorate([
  property({ type: Boolean, attribute: "always-focusable" })
], Chip.prototype, "alwaysFocusable", void 0);
__decorate([
  property()
], Chip.prototype, "label", void 0);

export {
  Chip
};
/*! Bundled license information:

@material/web/chips/internal/chip.js:
  (**
   * @license
   * Copyright 2023 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
//# sourceMappingURL=chunk-WKPN62AU.js.map
