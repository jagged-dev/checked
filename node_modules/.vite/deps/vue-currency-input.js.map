{
  "version": 3,
  "sources": ["../../vue-currency-input/dist/index.mjs"],
  "sourcesContent": ["/**\r\n * Vue Currency Input 3.0.5\r\n * (c) 2018-2023 Matthias Stiller\r\n * @license MIT\r\n */\r\nimport { ref, getCurrentInstance, version, computed, watch } from 'vue';\r\n\r\nvar CurrencyDisplay;\r\n(function (CurrencyDisplay) {\r\n    CurrencyDisplay[\"symbol\"] = \"symbol\";\r\n    CurrencyDisplay[\"narrowSymbol\"] = \"narrowSymbol\";\r\n    CurrencyDisplay[\"code\"] = \"code\";\r\n    CurrencyDisplay[\"name\"] = \"name\";\r\n    CurrencyDisplay[\"hidden\"] = \"hidden\";\r\n})(CurrencyDisplay || (CurrencyDisplay = {}));\r\nvar ValueScaling;\r\n(function (ValueScaling) {\r\n    ValueScaling[\"precision\"] = \"precision\";\r\n    ValueScaling[\"thousands\"] = \"thousands\";\r\n    ValueScaling[\"millions\"] = \"millions\";\r\n    ValueScaling[\"billions\"] = \"billions\";\r\n})(ValueScaling || (ValueScaling = {}));\r\n\r\nconst escapeRegExp = (str) => {\r\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n};\r\nconst removeLeadingZeros = (str) => {\r\n    return str.replace(/^0+(0$|[^0])/, '$1');\r\n};\r\nconst count = (str, search) => {\r\n    return (str.match(new RegExp(escapeRegExp(search), 'g')) || []).length;\r\n};\r\nconst substringBefore = (str, search) => {\r\n    return str.substring(0, str.indexOf(search));\r\n};\r\n\r\nconst DECIMAL_SEPARATORS = [',', '.', 'Ù«'];\r\nconst INTEGER_PATTERN = '(0|[1-9]\\\\d*)';\r\nclass CurrencyFormat {\r\n    constructor(options) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        const { currency, currencyDisplay, locale, precision, accountingSign, useGrouping } = options;\r\n        this.locale = locale;\r\n        this.options = {\r\n            currency,\r\n            useGrouping,\r\n            style: 'currency',\r\n            currencySign: accountingSign ? 'accounting' : undefined,\r\n            currencyDisplay: currencyDisplay !== CurrencyDisplay.hidden ? currencyDisplay : undefined\r\n        };\r\n        const numberFormat = new Intl.NumberFormat(locale, this.options);\r\n        const formatParts = numberFormat.formatToParts(123456);\r\n        this.currency = (_a = formatParts.find(({ type }) => type === 'currency')) === null || _a === void 0 ? void 0 : _a.value;\r\n        this.digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((i) => i.toLocaleString(locale));\r\n        this.decimalSymbol = (_b = formatParts.find(({ type }) => type === 'decimal')) === null || _b === void 0 ? void 0 : _b.value;\r\n        this.groupingSymbol = (_c = formatParts.find(({ type }) => type === 'group')) === null || _c === void 0 ? void 0 : _c.value;\r\n        this.minusSign = (_d = numberFormat.formatToParts(-1).find(({ type }) => type === 'minusSign')) === null || _d === void 0 ? void 0 : _d.value;\r\n        if (this.decimalSymbol === undefined) {\r\n            this.minimumFractionDigits = this.maximumFractionDigits = 0;\r\n        }\r\n        else if (typeof precision === 'number') {\r\n            this.minimumFractionDigits = this.maximumFractionDigits = precision;\r\n        }\r\n        else {\r\n            this.minimumFractionDigits = (_e = precision === null || precision === void 0 ? void 0 : precision.min) !== null && _e !== void 0 ? _e : numberFormat.resolvedOptions().minimumFractionDigits;\r\n            this.maximumFractionDigits = (_f = precision === null || precision === void 0 ? void 0 : precision.max) !== null && _f !== void 0 ? _f : numberFormat.resolvedOptions().maximumFractionDigits;\r\n        }\r\n        const getPrefix = (str) => {\r\n            return substringBefore(str, this.digits[1]);\r\n        };\r\n        const getSuffix = (str) => {\r\n            return str.substring(str.lastIndexOf(this.decimalSymbol ? this.digits[0] : this.digits[1]) + 1);\r\n        };\r\n        this.prefix = getPrefix(numberFormat.format(1));\r\n        this.suffix = getSuffix(numberFormat.format(1));\r\n        this.negativePrefix = getPrefix(numberFormat.format(-1));\r\n        this.negativeSuffix = getSuffix(numberFormat.format(-1));\r\n    }\r\n    parse(str) {\r\n        if (str) {\r\n            const negative = this.isNegative(str);\r\n            str = this.normalizeDigits(str);\r\n            str = this.stripCurrency(str, negative);\r\n            str = this.stripSignLiterals(str);\r\n            const fraction = this.decimalSymbol ? `(?:${escapeRegExp(this.decimalSymbol)}(\\\\d*))?` : '';\r\n            const match = this.stripGroupingSeparator(str).match(new RegExp(`^${INTEGER_PATTERN}${fraction}$`));\r\n            if (match && this.isValidIntegerFormat(this.decimalSymbol ? str.split(this.decimalSymbol)[0] : str, Number(match[1]))) {\r\n                return Number(`${negative ? '-' : ''}${this.onlyDigits(match[1])}.${this.onlyDigits(match[2] || '')}`);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    isValidIntegerFormat(formattedNumber, integerNumber) {\r\n        const options = { ...this.options, minimumFractionDigits: 0 };\r\n        return [\r\n            this.stripCurrency(this.normalizeDigits(integerNumber.toLocaleString(this.locale, { ...options, useGrouping: true })), false),\r\n            this.stripCurrency(this.normalizeDigits(integerNumber.toLocaleString(this.locale, { ...options, useGrouping: false })), false)\r\n        ].includes(formattedNumber);\r\n    }\r\n    format(value, options = {\r\n        minimumFractionDigits: this.minimumFractionDigits,\r\n        maximumFractionDigits: this.maximumFractionDigits\r\n    }) {\r\n        return value != null ? value.toLocaleString(this.locale, { ...this.options, ...options }) : '';\r\n    }\r\n    toFraction(str) {\r\n        return `${this.digits[0]}${this.decimalSymbol}${this.onlyLocaleDigits(str.substr(1)).substr(0, this.maximumFractionDigits)}`;\r\n    }\r\n    isFractionIncomplete(str) {\r\n        return !!this.normalizeDigits(this.stripGroupingSeparator(str)).match(new RegExp(`^${INTEGER_PATTERN}${escapeRegExp(this.decimalSymbol)}$`));\r\n    }\r\n    isNegative(str) {\r\n        return (str.startsWith(this.negativePrefix) ||\r\n            (this.minusSign === undefined && (str.startsWith('(') || str.startsWith('-'))) ||\r\n            (this.minusSign !== undefined && str.replace('-', this.minusSign).startsWith(this.minusSign)));\r\n    }\r\n    insertCurrency(str, negative) {\r\n        return `${negative ? this.negativePrefix : this.prefix}${str}${negative ? this.negativeSuffix : this.suffix}`;\r\n    }\r\n    stripGroupingSeparator(str) {\r\n        return this.groupingSymbol !== undefined ? str.replace(new RegExp(escapeRegExp(this.groupingSymbol), 'g'), '') : str;\r\n    }\r\n    stripSignLiterals(str) {\r\n        if (this.minusSign !== undefined) {\r\n            return str.replace('-', this.minusSign).replace(this.minusSign, '');\r\n        }\r\n        else {\r\n            return str.replace(/[-()]/g, '');\r\n        }\r\n    }\r\n    stripCurrency(str, negative) {\r\n        return str.replace(negative ? this.negativePrefix : this.prefix, '').replace(negative ? this.negativeSuffix : this.suffix, '');\r\n    }\r\n    normalizeDecimalSeparator(str, from) {\r\n        DECIMAL_SEPARATORS.forEach((s) => {\r\n            str = str.substr(0, from) + str.substr(from).replace(s, this.decimalSymbol);\r\n        });\r\n        return str;\r\n    }\r\n    normalizeDigits(str) {\r\n        if (this.digits[0] !== '0') {\r\n            this.digits.forEach((digit, index) => {\r\n                str = str.replace(new RegExp(digit, 'g'), String(index));\r\n            });\r\n        }\r\n        return str;\r\n    }\r\n    onlyDigits(str) {\r\n        return this.normalizeDigits(str).replace(/\\D+/g, '');\r\n    }\r\n    onlyLocaleDigits(str) {\r\n        return str.replace(new RegExp(`[^${this.digits.join('')}]*`, 'g'), '');\r\n    }\r\n}\r\n\r\nclass AbstractInputMask {\r\n    constructor(currencyFormat) {\r\n        this.currencyFormat = currencyFormat;\r\n    }\r\n}\r\nclass DefaultInputMask extends AbstractInputMask {\r\n    conformToMask(str, previousConformedValue = '') {\r\n        const negative = this.currencyFormat.isNegative(str);\r\n        const isEmptyNegativeValue = (str) => str === '' &&\r\n            negative &&\r\n            !(this.currencyFormat.minusSign === undefined\r\n                ? previousConformedValue === this.currencyFormat.negativePrefix + this.currencyFormat.negativeSuffix\r\n                : previousConformedValue === this.currencyFormat.negativePrefix);\r\n        const checkIncompleteValue = (str) => {\r\n            if (isEmptyNegativeValue(str)) {\r\n                return '';\r\n            }\r\n            else if (this.currencyFormat.maximumFractionDigits > 0) {\r\n                if (this.currencyFormat.isFractionIncomplete(str)) {\r\n                    return str;\r\n                }\r\n                else if (str.startsWith(this.currencyFormat.decimalSymbol)) {\r\n                    return this.currencyFormat.toFraction(str);\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        let value = str;\r\n        value = this.currencyFormat.stripCurrency(value, negative);\r\n        value = this.currencyFormat.stripSignLiterals(value);\r\n        const incompleteValue = checkIncompleteValue(value);\r\n        if (incompleteValue != null) {\r\n            return this.currencyFormat.insertCurrency(incompleteValue, negative);\r\n        }\r\n        const [integer, ...fraction] = value.split(this.currencyFormat.decimalSymbol);\r\n        const integerDigits = removeLeadingZeros(this.currencyFormat.onlyDigits(integer));\r\n        const fractionDigits = this.currencyFormat.onlyDigits(fraction.join('')).substr(0, this.currencyFormat.maximumFractionDigits);\r\n        const invalidFraction = fraction.length > 0 && fractionDigits.length === 0;\r\n        const invalidNegativeValue = integerDigits === '' &&\r\n            negative &&\r\n            (this.currencyFormat.minusSign === undefined\r\n                ? previousConformedValue === str.slice(0, -2) + this.currencyFormat.negativeSuffix\r\n                : previousConformedValue === str.slice(0, -1));\r\n        if (invalidFraction || invalidNegativeValue || isEmptyNegativeValue(integerDigits)) {\r\n            return previousConformedValue;\r\n        }\r\n        else if (integerDigits.match(/\\d+/)) {\r\n            return {\r\n                numberValue: Number(`${negative ? '-' : ''}${integerDigits}.${fractionDigits}`),\r\n                fractionDigits\r\n            };\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n}\r\nclass AutoDecimalDigitsInputMask extends AbstractInputMask {\r\n    conformToMask(str, previousConformedValue = '') {\r\n        if (str === '' ||\r\n            (this.currencyFormat.parse(previousConformedValue) === 0 &&\r\n                this.currencyFormat.stripCurrency(previousConformedValue, true).slice(0, -1) === this.currencyFormat.stripCurrency(str, true))) {\r\n            return '';\r\n        }\r\n        const negative = this.currencyFormat.isNegative(str);\r\n        const numberValue = this.currencyFormat.stripSignLiterals(str) === ''\r\n            ? -0\r\n            : Number(`${negative ? '-' : ''}${removeLeadingZeros(this.currencyFormat.onlyDigits(str))}`) / Math.pow(10, this.currencyFormat.maximumFractionDigits);\r\n        return {\r\n            numberValue,\r\n            fractionDigits: numberValue.toFixed(this.currencyFormat.maximumFractionDigits).slice(-this.currencyFormat.maximumFractionDigits)\r\n        };\r\n    }\r\n}\r\n\r\nconst DEFAULT_OPTIONS = {\r\n    locale: undefined,\r\n    currency: undefined,\r\n    currencyDisplay: undefined,\r\n    hideGroupingSeparatorOnFocus: true,\r\n    hideCurrencySymbolOnFocus: true,\r\n    hideNegligibleDecimalDigitsOnFocus: true,\r\n    precision: undefined,\r\n    autoDecimalDigits: false,\r\n    valueRange: undefined,\r\n    useGrouping: undefined,\r\n    valueScaling: undefined\r\n};\r\nclass CurrencyInput {\r\n    constructor(args) {\r\n        this.el = args.el;\r\n        this.onInput = args.onInput;\r\n        this.onChange = args.onChange;\r\n        this.addEventListener();\r\n        this.init(args.options);\r\n    }\r\n    setOptions(options) {\r\n        this.init(options);\r\n        this.format(this.currencyFormat.format(this.validateValueRange(this.numberValue)));\r\n        this.onChange(this.getValue());\r\n    }\r\n    getValue() {\r\n        const numberValue = this.valueScaling && this.numberValue != null ? this.toInteger(this.numberValue, this.valueScaling) : this.numberValue;\r\n        return { number: numberValue, formatted: this.formattedValue };\r\n    }\r\n    setValue(value) {\r\n        const newValue = this.valueScaling !== undefined && value != null ? this.toFloat(value, this.valueScaling) : value;\r\n        if (newValue !== this.numberValue) {\r\n            this.format(this.currencyFormat.format(this.validateValueRange(newValue)));\r\n            this.onChange(this.getValue());\r\n        }\r\n    }\r\n    init(options) {\r\n        this.options = {\r\n            ...DEFAULT_OPTIONS,\r\n            ...options\r\n        };\r\n        if (this.options.autoDecimalDigits) {\r\n            this.options.hideNegligibleDecimalDigitsOnFocus = false;\r\n        }\r\n        if (!this.el.getAttribute('inputmode')) {\r\n            this.el.setAttribute('inputmode', this.options.autoDecimalDigits ? 'numeric' : 'decimal');\r\n        }\r\n        this.currencyFormat = new CurrencyFormat(this.options);\r\n        this.numberMask = this.options.autoDecimalDigits ? new AutoDecimalDigitsInputMask(this.currencyFormat) : new DefaultInputMask(this.currencyFormat);\r\n        const valueScalingOptions = {\r\n            [ValueScaling.precision]: this.currencyFormat.maximumFractionDigits,\r\n            [ValueScaling.thousands]: 3,\r\n            [ValueScaling.millions]: 6,\r\n            [ValueScaling.billions]: 9\r\n        };\r\n        this.valueScaling = this.options.valueScaling ? valueScalingOptions[this.options.valueScaling] : undefined;\r\n        this.valueScalingFractionDigits =\r\n            this.valueScaling !== undefined && this.options.valueScaling !== ValueScaling.precision\r\n                ? this.valueScaling + this.currencyFormat.maximumFractionDigits\r\n                : this.currencyFormat.maximumFractionDigits;\r\n        this.minValue = this.getMinValue();\r\n        this.maxValue = this.getMaxValue();\r\n    }\r\n    getMinValue() {\r\n        var _a, _b;\r\n        let min = this.toFloat(-Number.MAX_SAFE_INTEGER);\r\n        if (((_a = this.options.valueRange) === null || _a === void 0 ? void 0 : _a.min) !== undefined) {\r\n            min = Math.max((_b = this.options.valueRange) === null || _b === void 0 ? void 0 : _b.min, this.toFloat(-Number.MAX_SAFE_INTEGER));\r\n        }\r\n        return min;\r\n    }\r\n    getMaxValue() {\r\n        var _a, _b;\r\n        let max = this.toFloat(Number.MAX_SAFE_INTEGER);\r\n        if (((_a = this.options.valueRange) === null || _a === void 0 ? void 0 : _a.max) !== undefined) {\r\n            max = Math.min((_b = this.options.valueRange) === null || _b === void 0 ? void 0 : _b.max, this.toFloat(Number.MAX_SAFE_INTEGER));\r\n        }\r\n        return max;\r\n    }\r\n    toFloat(value, maxFractionDigits) {\r\n        return value / Math.pow(10, maxFractionDigits !== null && maxFractionDigits !== void 0 ? maxFractionDigits : this.valueScalingFractionDigits);\r\n    }\r\n    toInteger(value, maxFractionDigits) {\r\n        return Number(value\r\n            .toFixed(maxFractionDigits !== null && maxFractionDigits !== void 0 ? maxFractionDigits : this.valueScalingFractionDigits)\r\n            .split('.')\r\n            .join(''));\r\n    }\r\n    validateValueRange(value) {\r\n        return value != null ? Math.min(Math.max(value, this.minValue), this.maxValue) : value;\r\n    }\r\n    format(value, hideNegligibleDecimalDigits = false) {\r\n        if (value != null) {\r\n            if (this.decimalSymbolInsertedAt !== undefined) {\r\n                value = this.currencyFormat.normalizeDecimalSeparator(value, this.decimalSymbolInsertedAt);\r\n                this.decimalSymbolInsertedAt = undefined;\r\n            }\r\n            const conformedValue = this.numberMask.conformToMask(value, this.formattedValue);\r\n            let formattedValue;\r\n            if (typeof conformedValue === 'object') {\r\n                const { numberValue, fractionDigits } = conformedValue;\r\n                let { maximumFractionDigits, minimumFractionDigits } = this.currencyFormat;\r\n                if (this.focus) {\r\n                    minimumFractionDigits = hideNegligibleDecimalDigits\r\n                        ? fractionDigits.replace(/0+$/, '').length\r\n                        : Math.min(maximumFractionDigits, fractionDigits.length);\r\n                }\r\n                else if (Number.isInteger(numberValue) && !this.options.autoDecimalDigits && (this.options.precision === undefined || minimumFractionDigits === 0)) {\r\n                    minimumFractionDigits = maximumFractionDigits = 0;\r\n                }\r\n                formattedValue =\r\n                    this.toInteger(Math.abs(numberValue)) > Number.MAX_SAFE_INTEGER\r\n                        ? this.formattedValue\r\n                        : this.currencyFormat.format(numberValue, {\r\n                            useGrouping: this.options.useGrouping !== false && !(this.focus && this.options.hideGroupingSeparatorOnFocus),\r\n                            minimumFractionDigits,\r\n                            maximumFractionDigits\r\n                        });\r\n            }\r\n            else {\r\n                formattedValue = conformedValue;\r\n            }\r\n            if (this.maxValue <= 0 && !this.currencyFormat.isNegative(formattedValue) && this.currencyFormat.parse(formattedValue) !== 0) {\r\n                formattedValue = formattedValue.replace(this.currencyFormat.prefix, this.currencyFormat.negativePrefix);\r\n            }\r\n            if (this.minValue >= 0) {\r\n                formattedValue = formattedValue.replace(this.currencyFormat.negativePrefix, this.currencyFormat.prefix);\r\n            }\r\n            if (this.options.currencyDisplay === CurrencyDisplay.hidden || (this.focus && this.options.hideCurrencySymbolOnFocus)) {\r\n                formattedValue = formattedValue\r\n                    .replace(this.currencyFormat.negativePrefix, this.currencyFormat.minusSign !== undefined ? this.currencyFormat.minusSign : '(')\r\n                    .replace(this.currencyFormat.negativeSuffix, this.currencyFormat.minusSign !== undefined ? '' : ')')\r\n                    .replace(this.currencyFormat.prefix, '')\r\n                    .replace(this.currencyFormat.suffix, '');\r\n            }\r\n            this.el.value = formattedValue;\r\n            this.numberValue = this.currencyFormat.parse(formattedValue);\r\n        }\r\n        else {\r\n            this.el.value = '';\r\n            this.numberValue = null;\r\n        }\r\n        this.formattedValue = this.el.value;\r\n        this.onInput(this.getValue());\r\n    }\r\n    addEventListener() {\r\n        this.el.addEventListener('input', (e) => {\r\n            const { value, selectionStart } = this.el;\r\n            const inputEvent = e;\r\n            if (selectionStart && inputEvent.data && DECIMAL_SEPARATORS.includes(inputEvent.data)) {\r\n                this.decimalSymbolInsertedAt = selectionStart - 1;\r\n            }\r\n            this.format(value);\r\n            if (this.focus && selectionStart != null) {\r\n                const getCaretPositionAfterFormat = () => {\r\n                    const { prefix, suffix, decimalSymbol, maximumFractionDigits, groupingSymbol } = this.currencyFormat;\r\n                    let caretPositionFromLeft = value.length - selectionStart;\r\n                    const newValueLength = this.formattedValue.length;\r\n                    if (this.currencyFormat.minusSign === undefined && (value.startsWith('(') || value.startsWith('-')) && !value.endsWith(')')) {\r\n                        return newValueLength - this.currencyFormat.negativeSuffix.length > 1 ? this.formattedValue.substring(selectionStart).length : 1;\r\n                    }\r\n                    if (this.formattedValue.substr(selectionStart, 1) === groupingSymbol &&\r\n                        count(this.formattedValue, groupingSymbol) === count(value, groupingSymbol) + 1) {\r\n                        return newValueLength - caretPositionFromLeft - 1;\r\n                    }\r\n                    if (newValueLength < caretPositionFromLeft) {\r\n                        return selectionStart;\r\n                    }\r\n                    if (decimalSymbol !== undefined && value.indexOf(decimalSymbol) !== -1) {\r\n                        const decimalSymbolPosition = value.indexOf(decimalSymbol) + 1;\r\n                        if (Math.abs(newValueLength - value.length) > 1 && selectionStart <= decimalSymbolPosition) {\r\n                            return this.formattedValue.indexOf(decimalSymbol) + 1;\r\n                        }\r\n                        else {\r\n                            if (!this.options.autoDecimalDigits && selectionStart > decimalSymbolPosition) {\r\n                                if (this.currencyFormat.onlyDigits(value.substr(decimalSymbolPosition)).length - 1 === maximumFractionDigits) {\r\n                                    caretPositionFromLeft -= 1;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return this.options.hideCurrencySymbolOnFocus || this.options.currencyDisplay === CurrencyDisplay.hidden\r\n                        ? newValueLength - caretPositionFromLeft\r\n                        : Math.max(newValueLength - Math.max(caretPositionFromLeft, suffix.length), prefix.length);\r\n                };\r\n                this.setCaretPosition(getCaretPositionAfterFormat());\r\n            }\r\n        });\r\n        this.el.addEventListener('focus', () => {\r\n            this.focus = true;\r\n            this.numberValueOnFocus = this.numberValue;\r\n            setTimeout(() => {\r\n                const { value, selectionStart, selectionEnd } = this.el;\r\n                this.format(value, this.options.hideNegligibleDecimalDigitsOnFocus);\r\n                if (selectionStart != null && selectionEnd != null && Math.abs(selectionStart - selectionEnd) > 0) {\r\n                    this.setCaretPosition(0, this.el.value.length);\r\n                }\r\n                else if (selectionStart != null) {\r\n                    const caretPositionOnFocus = this.getCaretPositionOnFocus(value, selectionStart);\r\n                    this.setCaretPosition(caretPositionOnFocus);\r\n                }\r\n            });\r\n        });\r\n        this.el.addEventListener('blur', () => {\r\n            this.focus = false;\r\n            this.format(this.currencyFormat.format(this.validateValueRange(this.numberValue)));\r\n            if (this.numberValueOnFocus !== this.numberValue) {\r\n                this.onChange(this.getValue());\r\n            }\r\n        });\r\n    }\r\n    getCaretPositionOnFocus(value, selectionStart) {\r\n        if (this.numberValue == null) {\r\n            return selectionStart;\r\n        }\r\n        const { prefix, negativePrefix, suffix, negativeSuffix, groupingSymbol, currency } = this.currencyFormat;\r\n        const isNegative = this.numberValue < 0;\r\n        const currentPrefix = isNegative ? negativePrefix : prefix;\r\n        const prefixLength = currentPrefix.length;\r\n        if (this.options.hideCurrencySymbolOnFocus || this.options.currencyDisplay === CurrencyDisplay.hidden) {\r\n            if (isNegative) {\r\n                if (selectionStart <= 1) {\r\n                    return 1;\r\n                }\r\n                else if (value.endsWith(')') && selectionStart > value.indexOf(')')) {\r\n                    return this.formattedValue.length - 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const suffixLength = isNegative ? negativeSuffix.length : suffix.length;\r\n            if (selectionStart >= value.length - suffixLength) {\r\n                return this.formattedValue.length - suffixLength;\r\n            }\r\n            else if (selectionStart < prefixLength) {\r\n                return prefixLength;\r\n            }\r\n        }\r\n        let result = selectionStart;\r\n        if (this.options.hideCurrencySymbolOnFocus &&\r\n            this.options.currencyDisplay !== CurrencyDisplay.hidden &&\r\n            selectionStart >= prefixLength &&\r\n            currency !== undefined &&\r\n            currentPrefix.includes(currency)) {\r\n            result -= prefixLength;\r\n            if (isNegative) {\r\n                result += 1;\r\n            }\r\n        }\r\n        if (this.options.hideGroupingSeparatorOnFocus && groupingSymbol !== undefined) {\r\n            result -= count(value.substring(0, selectionStart), groupingSymbol);\r\n        }\r\n        return result;\r\n    }\r\n    setCaretPosition(start, end = start) {\r\n        this.el.setSelectionRange(start, end);\r\n    }\r\n}\r\n\r\nconst findInput = (el) => ((el === null || el === void 0 ? void 0 : el.matches('input')) ? el : el === null || el === void 0 ? void 0 : el.querySelector('input'));\r\nfunction useCurrencyInput(options, autoEmit) {\r\n    var _a, _b, _c, _d;\r\n    let currencyInput;\r\n    const inputRef = ref(null);\r\n    const formattedValue = ref(null);\r\n    const numberValue = ref(null);\r\n    const vm = getCurrentInstance();\r\n    const emit = (vm === null || vm === void 0 ? void 0 : vm.emit) || ((_b = (_a = vm === null || vm === void 0 ? void 0 : vm.proxy) === null || _a === void 0 ? void 0 : _a.$emit) === null || _b === void 0 ? void 0 : _b.bind(vm === null || vm === void 0 ? void 0 : vm.proxy));\r\n    const props = ((vm === null || vm === void 0 ? void 0 : vm.props) || ((_c = vm === null || vm === void 0 ? void 0 : vm.proxy) === null || _c === void 0 ? void 0 : _c.$props));\r\n    const isVue3 = version.startsWith('3');\r\n    const lazyModel = isVue3 && ((_d = vm === null || vm === void 0 ? void 0 : vm.attrs.modelModifiers) === null || _d === void 0 ? void 0 : _d.lazy);\r\n    const modelValue = computed(() => props === null || props === void 0 ? void 0 : props[isVue3 ? 'modelValue' : 'value']);\r\n    const inputEvent = isVue3 ? 'update:modelValue' : 'input';\r\n    const changeEvent = lazyModel ? 'update:modelValue' : 'change';\r\n    watch(inputRef, (value) => {\r\n        var _a;\r\n        if (value) {\r\n            const el = findInput((_a = value === null || value === void 0 ? void 0 : value.$el) !== null && _a !== void 0 ? _a : value);\r\n            if (el) {\r\n                currencyInput = new CurrencyInput({\r\n                    el,\r\n                    options,\r\n                    onInput: (value) => {\r\n                        if (!lazyModel && autoEmit !== false && modelValue.value !== value.number) {\r\n                            emit === null || emit === void 0 ? void 0 : emit(inputEvent, value.number);\r\n                        }\r\n                        numberValue.value = value.number;\r\n                        formattedValue.value = value.formatted;\r\n                    },\r\n                    onChange: (value) => {\r\n                        if (autoEmit !== false) {\r\n                            emit === null || emit === void 0 ? void 0 : emit(changeEvent, value.number);\r\n                        }\r\n                    }\r\n                });\r\n                currencyInput.setValue(modelValue.value);\r\n            }\r\n            else {\r\n                console.error('No input element found. Please make sure that the \"inputRef\" template ref is properly assigned.');\r\n            }\r\n        }\r\n        else {\r\n            currencyInput = null;\r\n        }\r\n    });\r\n    return {\r\n        inputRef,\r\n        numberValue,\r\n        formattedValue,\r\n        setValue: (value) => currencyInput === null || currencyInput === void 0 ? void 0 : currencyInput.setValue(value),\r\n        setOptions: (options) => currencyInput === null || currencyInput === void 0 ? void 0 : currencyInput.setOptions(options)\r\n    };\r\n}\r\n\r\nexport { CurrencyDisplay, ValueScaling, useCurrencyInput };\r\n"],
  "mappings": "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",
  "names": ["CurrencyDisplay", "ValueScaling", "str", "_a", "value", "options"]
}
