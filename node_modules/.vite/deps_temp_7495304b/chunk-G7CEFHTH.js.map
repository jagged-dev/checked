{
  "version": 3,
  "sources": ["../../@material/web/internal/aria/aria.ts", "../../@material/web/internal/aria/delegate.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Accessibility Object Model reflective aria property name types.\n */\nexport type ARIAProperty = Exclude<keyof ARIAMixin, 'role'>;\n\n/**\n * Accessibility Object Model reflective aria properties.\n */\nexport const ARIA_PROPERTIES: ARIAProperty[] = [\n  'ariaAtomic',\n  'ariaAutoComplete',\n  'ariaBusy',\n  'ariaChecked',\n  'ariaColCount',\n  'ariaColIndex',\n  'ariaColSpan',\n  'ariaCurrent',\n  'ariaDisabled',\n  'ariaExpanded',\n  'ariaHasPopup',\n  'ariaHidden',\n  'ariaInvalid',\n  'ariaKeyShortcuts',\n  'ariaLabel',\n  'ariaLevel',\n  'ariaLive',\n  'ariaModal',\n  'ariaMultiLine',\n  'ariaMultiSelectable',\n  'ariaOrientation',\n  'ariaPlaceholder',\n  'ariaPosInSet',\n  'ariaPressed',\n  'ariaReadOnly',\n  'ariaRequired',\n  'ariaRoleDescription',\n  'ariaRowCount',\n  'ariaRowIndex',\n  'ariaRowSpan',\n  'ariaSelected',\n  'ariaSetSize',\n  'ariaSort',\n  'ariaValueMax',\n  'ariaValueMin',\n  'ariaValueNow',\n  'ariaValueText',\n];\n\n/**\n * Accessibility Object Model aria attribute name types.\n */\nexport type ARIAAttribute = ARIAPropertyToAttribute<ARIAProperty>;\n\n/**\n * Accessibility Object Model aria attributes.\n */\nexport const ARIA_ATTRIBUTES = ARIA_PROPERTIES.map(ariaPropertyToAttribute);\n\n/**\n * Checks if an attribute is one of the AOM aria attributes.\n *\n * @example\n * isAriaAttribute('aria-label'); // true\n *\n * @param attribute The attribute to check.\n * @return True if the attribute is an aria attribute, or false if not.\n */\nexport function isAriaAttribute(attribute: string): attribute is ARIAAttribute {\n  return attribute.startsWith('aria-');\n}\n\n/**\n * Converts an AOM aria property into its corresponding attribute.\n *\n * @example\n * ariaPropertyToAttribute('ariaLabel'); // 'aria-label'\n *\n * @param property The aria property.\n * @return The aria attribute.\n */\nexport function ariaPropertyToAttribute<K extends ARIAProperty|'role'>(\n    property: K) {\n  return property\n             .replace('aria', 'aria-')\n             // IDREF attributes also include an \"Element\" or \"Elements\" suffix\n             .replace(/Elements?/g, '')\n             .toLowerCase() as ARIAPropertyToAttribute<K>;\n}\n\n// Converts an `ariaFoo` string type to an `aria-foo` string type.\ntype ARIAPropertyToAttribute<K extends string> =\n    K extends `aria${infer Suffix}Element${infer OptS}` ?\n    `aria-${Lowercase < Suffix >}` :\n    K extends `aria${infer Suffix}` ? `aria-${Lowercase < Suffix >}` : K;\n\n/**\n * An extension of `ARIAMixin` that enforces strict value types for aria\n * properties.\n *\n * This is needed for correct typing in render functions with lit analyzer.\n *\n * @example\n * render() {\n *   const {ariaLabel} = this as ARIAMixinStrict;\n *   return html`\n *     <button aria-label=${ariaLabel || nothing}>\n *       <slot></slot>\n *     </button>\n *   `;\n * }\n */\nexport interface ARIAMixinStrict extends ARIAMixin {\n  ariaAtomic: 'true'|'false'|null;\n  ariaAutoComplete: 'none'|'inline'|'list'|'both'|null;\n  ariaBusy: 'true'|'false'|null;\n  ariaChecked: 'true'|'false'|null;\n  ariaColCount: `${number}`|null;\n  ariaColIndex: `${number}`|null;\n  ariaColSpan: `${number}`|null;\n  ariaCurrent: 'page'|'step'|'location'|'date'|'time'|'true'|'false'|null;\n  ariaDisabled: 'true'|'false'|null;\n  ariaExpanded: 'true'|'false'|null;\n  ariaHasPopup: 'false'|'true'|'menu'|'listbox'|'tree'|'grid'|'dialog'|null;\n  ariaHidden: 'true'|'false'|null;\n  ariaInvalid: 'true'|'false'|null;\n  ariaKeyShortcuts: string|null;\n  ariaLabel: string|null;\n  ariaLevel: `${number}`|null;\n  ariaLive: 'assertive'|'off'|'polite'|null;\n  ariaModal: 'true'|'false'|null;\n  ariaMultiLine: 'true'|'false'|null;\n  ariaMultiSelectable: 'true'|'false'|null;\n  ariaOrientation: 'horizontal'|'vertical'|'undefined'|null;\n  ariaPlaceholder: string|null;\n  ariaPosInSet: `${number}`|null;\n  ariaPressed: 'true'|'false'|null;\n  ariaReadOnly: 'true'|'false'|null;\n  ariaRequired: 'true'|'false'|null;\n  ariaRoleDescription: string|null;\n  ariaRowCount: `${number}`|null;\n  ariaRowIndex: `${number}`|null;\n  ariaRowSpan: `${number}`|null;\n  ariaSelected: 'true'|'false'|null;\n  ariaSetSize: `${number}`|null;\n  ariaSort: 'ascending'|'descending'|'none'|'other'|null;\n  ariaValueMax: `${number}`|null;\n  ariaValueMin: `${number}`|null;\n  ariaValueNow: `${number}`|null;\n  ariaValueText: string|null;\n  role: ARIARole|null;\n}\n\n/**\n * Valid values for `role`.\n */\nexport type ARIARole =\n    'alert'|'alertdialog'|'button'|'checkbox'|'dialog'|'gridcell'|'link'|'log'|\n    'marquee'|'menuitem'|'menuitemcheckbox'|'menuitemradio'|'option'|\n    'progressbar'|'radio'|'scrollbar'|'searchbox'|'slider'|'spinbutton'|\n    'status'|'switch'|'tab'|'tabpanel'|'textbox'|'timer'|'tooltip'|'treeitem'|\n    'combobox'|'grid'|'listbox'|'menu'|'menubar'|'radiogroup'|'tablist'|'tree'|\n    'treegrid'|'application'|'article'|'cell'|'columnheader'|'definition'|\n    'directory'|'document'|'feed'|'figure'|'group'|'heading'|'img'|'list'|\n    'listitem'|'math'|'none'|'note'|'presentation'|'region'|'row'|'rowgroup'|\n    'rowheader'|'separator'|'table'|'term'|'text'|'toolbar'|'banner'|\n    'complementary'|'contentinfo'|'form'|'main'|'navigation'|'region'|'search'|\n    'doc-abstract'|'doc-acknowledgments'|'doc-afterword'|'doc-appendix'|\n    'doc-backlink'|'doc-biblioentry'|'doc-bibliography'|'doc-biblioref'|\n    'doc-chapter'|'doc-colophon'|'doc-conclusion'|'doc-cover'|'doc-credit'|\n    'doc-credits'|'doc-dedication'|'doc-endnote'|'doc-endnotes'|'doc-epigraph'|\n    'doc-epilogue'|'doc-errata'|'doc-example'|'doc-footnote'|'doc-foreword'|\n    'doc-glossary'|'doc-glossref'|'doc-index'|'doc-introduction'|'doc-noteref'|\n    'doc-notice'|'doc-pagebreak'|'doc-pagelist'|'doc-part'|'doc-preface'|\n    'doc-prologue'|'doc-pullquote'|'doc-qna'|'doc-subtitle'|'doc-tip'|'doc-toc';\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ReactiveElement} from 'lit';\n\nimport {ARIA_PROPERTIES, ariaPropertyToAttribute} from './aria.js';\n\n/**\n * Sets up a `ReactiveElement` constructor to enable updates when delegating\n * aria attributes. Elements may bind `this.aria*` properties to `aria-*`\n * attributes in their render functions.\n *\n * This function will:\n * - Call `requestUpdate()` when an aria attribute changes.\n * - Add `role=\"presentation\"` to the host.\n *\n * NOTE: The following features are not currently supported:\n * - Delegating IDREF attributes (ex: `aria-labelledby`, `aria-controls`)\n * - Delegating the `role` attribute\n *\n * @example\n * class XButton extends LitElement {\n *   static {\n *     requestUpdateOnAriaChange(XButton);\n *   }\n *\n *   protected override render() {\n *     return html`\n *       <button aria-label=${this.ariaLabel || nothing}>\n *         <slot></slot>\n *       </button>\n *     `;\n *   }\n * }\n *\n * @param ctor The `ReactiveElement` constructor to patch.\n */\nexport function requestUpdateOnAriaChange(ctor: typeof ReactiveElement) {\n  for (const ariaProperty of ARIA_PROPERTIES) {\n    ctor.createProperty(ariaProperty, {\n      attribute: ariaPropertyToAttribute(ariaProperty),\n      reflect: true,\n    });\n  }\n\n  ctor.addInitializer(element => {\n    const controller = {\n      hostConnected() {\n        element.setAttribute('role', 'presentation');\n      }\n    };\n\n    element.addController(controller);\n  });\n}\n"],
  "mappings": ";AAcO,IAAM,kBAAkC;EAC7C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAWK,IAAM,kBAAkB,gBAAgB,IAAI,uBAAuB;AAwBpE,SAAU,wBACZ,UAAW;AACb,SAAO,SACK,QAAQ,QAAQ,OAAO,EAEvB,QAAQ,cAAc,EAAE,EACxB,YAAW;AACzB;;;ACrDM,SAAU,0BAA0B,MAA4B;AACpE,aAAW,gBAAgB,iBAAiB;AAC1C,SAAK,eAAe,cAAc;MAChC,WAAW,wBAAwB,YAAY;MAC/C,SAAS;KACV;;AAGH,OAAK,eAAe,aAAU;AAC5B,UAAM,aAAa;MACjB,gBAAa;AACX,gBAAQ,aAAa,QAAQ,cAAc;MAC7C;;AAGF,YAAQ,cAAc,UAAU;EAClC,CAAC;AACH;",
  "names": []
}
