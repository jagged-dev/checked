{
  "version": 3,
  "sources": ["../../@material/web/internal/aria/aria.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {isServer, ReactiveElement} from 'lit';\n\n/**\n * Accessibility Object Model reflective aria property name types.\n */\nexport type ARIAProperty = Exclude<keyof ARIAMixin, 'role'>;\n\n/**\n * Accessibility Object Model reflective aria properties.\n */\nexport const ARIA_PROPERTIES: ARIAProperty[] = [\n  'ariaAtomic',\n  'ariaAutoComplete',\n  'ariaBusy',\n  'ariaChecked',\n  'ariaColCount',\n  'ariaColIndex',\n  'ariaColSpan',\n  'ariaCurrent',\n  'ariaDisabled',\n  'ariaExpanded',\n  'ariaHasPopup',\n  'ariaHidden',\n  'ariaInvalid',\n  'ariaKeyShortcuts',\n  'ariaLabel',\n  'ariaLevel',\n  'ariaLive',\n  'ariaModal',\n  'ariaMultiLine',\n  'ariaMultiSelectable',\n  'ariaOrientation',\n  'ariaPlaceholder',\n  'ariaPosInSet',\n  'ariaPressed',\n  'ariaReadOnly',\n  'ariaRequired',\n  'ariaRoleDescription',\n  'ariaRowCount',\n  'ariaRowIndex',\n  'ariaRowSpan',\n  'ariaSelected',\n  'ariaSetSize',\n  'ariaSort',\n  'ariaValueMax',\n  'ariaValueMin',\n  'ariaValueNow',\n  'ariaValueText',\n];\n\n/**\n * Accessibility Object Model aria attribute name types.\n */\nexport type ARIAAttribute = ARIAPropertyToAttribute<ARIAProperty>;\n\n/**\n * Accessibility Object Model aria attributes.\n */\nexport const ARIA_ATTRIBUTES = ARIA_PROPERTIES.map(ariaPropertyToAttribute);\n\n/**\n * Checks if an attribute is one of the AOM aria attributes.\n *\n * @example\n * isAriaAttribute('aria-label'); // true\n *\n * @param attribute The attribute to check.\n * @return True if the attribute is an aria attribute, or false if not.\n */\nexport function isAriaAttribute(attribute: string): attribute is ARIAAttribute {\n  return attribute.startsWith('aria-');\n}\n\n/**\n * Converts an AOM aria property into its corresponding attribute.\n *\n * @example\n * ariaPropertyToAttribute('ariaLabel'); // 'aria-label'\n *\n * @param property The aria property.\n * @return The aria attribute.\n */\nexport function ariaPropertyToAttribute<K extends ARIAProperty|'role'>(\n    property: K) {\n  return property\n             .replace('aria', 'aria-')\n             // IDREF attributes also include an \"Element\" or \"Elements\" suffix\n             .replace(/Elements?/g, '')\n             .toLowerCase() as ARIAPropertyToAttribute<K>;\n}\n\n// Converts an `ariaFoo` string type to an `aria-foo` string type.\ntype ARIAPropertyToAttribute<K extends string> =\n    K extends `aria${infer Suffix}Element${infer OptS}` ?\n    `aria-${Lowercase < Suffix >}` :\n    K extends `aria${infer Suffix}` ? `aria-${Lowercase < Suffix >}` : K;\n\n/**\n * An extension of `ARIAMixin` that enforces strict value types for aria\n * properties.\n *\n * This is needed for correct typing in render functions with lit analyzer.\n *\n * @example\n * render() {\n *   const {ariaLabel} = this as ARIAMixinStrict;\n *   return html`\n *     <button aria-label=${ariaLabel || nothing}>\n *       <slot></slot>\n *     </button>\n *   `;\n * }\n */\nexport interface ARIAMixinStrict extends ARIAMixin {\n  ariaAtomic: 'true'|'false'|null;\n  ariaAutoComplete: 'none'|'inline'|'list'|'both'|null;\n  ariaBusy: 'true'|'false'|null;\n  ariaChecked: 'true'|'false'|null;\n  ariaColCount: `${number}`|null;\n  ariaColIndex: `${number}`|null;\n  ariaColSpan: `${number}`|null;\n  ariaCurrent: 'page'|'step'|'location'|'date'|'time'|'true'|'false'|null;\n  ariaDisabled: 'true'|'false'|null;\n  ariaExpanded: 'true'|'false'|null;\n  ariaHasPopup: 'false'|'true'|'menu'|'listbox'|'tree'|'grid'|'dialog'|null;\n  ariaHidden: 'true'|'false'|null;\n  ariaInvalid: 'true'|'false'|null;\n  ariaKeyShortcuts: string|null;\n  ariaLabel: string|null;\n  ariaLevel: `${number}`|null;\n  ariaLive: 'assertive'|'off'|'polite'|null;\n  ariaModal: 'true'|'false'|null;\n  ariaMultiLine: 'true'|'false'|null;\n  ariaMultiSelectable: 'true'|'false'|null;\n  ariaOrientation: 'horizontal'|'vertical'|'undefined'|null;\n  ariaPlaceholder: string|null;\n  ariaPosInSet: `${number}`|null;\n  ariaPressed: 'true'|'false'|null;\n  ariaReadOnly: 'true'|'false'|null;\n  ariaRequired: 'true'|'false'|null;\n  ariaRoleDescription: string|null;\n  ariaRowCount: `${number}`|null;\n  ariaRowIndex: `${number}`|null;\n  ariaRowSpan: `${number}`|null;\n  ariaSelected: 'true'|'false'|null;\n  ariaSetSize: `${number}`|null;\n  ariaSort: 'ascending'|'descending'|'none'|'other'|null;\n  ariaValueMax: `${number}`|null;\n  ariaValueMin: `${number}`|null;\n  ariaValueNow: `${number}`|null;\n  ariaValueText: string|null;\n  role: ARIARole|null;\n}\n\n/**\n * Valid values for `role`.\n */\nexport type ARIARole =\n    'alert'|'alertdialog'|'button'|'checkbox'|'dialog'|'gridcell'|'link'|'log'|\n    'marquee'|'menuitem'|'menuitemcheckbox'|'menuitemradio'|'option'|\n    'progressbar'|'radio'|'scrollbar'|'searchbox'|'slider'|'spinbutton'|\n    'status'|'switch'|'tab'|'tabpanel'|'textbox'|'timer'|'tooltip'|'treeitem'|\n    'combobox'|'grid'|'listbox'|'menu'|'menubar'|'radiogroup'|'tablist'|'tree'|\n    'treegrid'|'application'|'article'|'cell'|'columnheader'|'definition'|\n    'directory'|'document'|'feed'|'figure'|'group'|'heading'|'img'|'list'|\n    'listitem'|'math'|'none'|'note'|'presentation'|'region'|'row'|'rowgroup'|\n    'rowheader'|'separator'|'table'|'term'|'text'|'toolbar'|'banner'|\n    'complementary'|'contentinfo'|'form'|'main'|'navigation'|'region'|'search'|\n    'doc-abstract'|'doc-acknowledgments'|'doc-afterword'|'doc-appendix'|\n    'doc-backlink'|'doc-biblioentry'|'doc-bibliography'|'doc-biblioref'|\n    'doc-chapter'|'doc-colophon'|'doc-conclusion'|'doc-cover'|'doc-credit'|\n    'doc-credits'|'doc-dedication'|'doc-endnote'|'doc-endnotes'|'doc-epigraph'|\n    'doc-epilogue'|'doc-errata'|'doc-example'|'doc-footnote'|'doc-foreword'|\n    'doc-glossary'|'doc-glossref'|'doc-index'|'doc-introduction'|'doc-noteref'|\n    'doc-notice'|'doc-pagebreak'|'doc-pagelist'|'doc-part'|'doc-preface'|\n    'doc-prologue'|'doc-pullquote'|'doc-qna'|'doc-subtitle'|'doc-tip'|'doc-toc';\n\n/**\n * Enables a host custom element to be the target for aria roles and attributes.\n * Components should set the `elementInternals.role` property.\n *\n * By default, aria components are tab focusable. Provide a `focusable: false`\n * option for components that should not be tab focusable, such as\n * `role=\"listbox\"`.\n *\n * This function will also polyfill aria `ElementInternals` properties for\n * Firefox.\n *\n * @param ctor The `ReactiveElement` constructor to set up.\n * @param options Options to configure the element's host aria.\n */\nexport function setupHostAria(\n    ctor: typeof ReactiveElement, {focusable}: SetupHostAriaOptions = {}) {\n  if (focusable !== false) {\n    ctor.addInitializer(host => {\n      host.addController({\n        hostConnected() {\n          if (host.hasAttribute('tabindex')) {\n            return;\n          }\n\n          host.tabIndex = 0;\n        }\n      });\n    });\n  }\n\n  if (isServer || 'role' in Element.prototype) {\n    return;\n  }\n\n  // Polyfill reflective aria properties for Firefox\n  for (const ariaProperty of ARIA_PROPERTIES) {\n    ctor.createProperty(ariaProperty, {\n      attribute: ariaPropertyToAttribute(ariaProperty),\n      reflect: true,\n    });\n  }\n\n  ctor.createProperty('role', {reflect: true});\n}\n\n/**\n * Options for setting up a host element as an aria target.\n */\nexport interface SetupHostAriaOptions {\n  /**\n   * Whether or not the element can be focused with the tab key. Defaults to\n   * true.\n   *\n   * Set this to false for aria roles that should not be tab focusable, such as\n   * `role=\"listbox\"`.\n   */\n  focusable?: boolean;\n}\n\n/**\n * Polyfills an element and its `ElementInternals` to support `ARIAMixin`\n * properties on internals. This is needed for Firefox.\n *\n * `setupHostAria()` must be called for the element class.\n *\n * @example\n * class XButton extends LitElement {\n *   static {\n *     setupHostAria(XButton);\n *   }\n *\n *   private internals =\n *       polyfillElementInternalsAria(this, this.attachInternals());\n *\n *   constructor() {\n *     super();\n *     this.internals.role = 'button';\n *   }\n * }\n */\nexport function polyfillElementInternalsAria(\n    host: ReactiveElement, internals: ElementInternals) {\n  if (checkIfElementInternalsSupportsAria(internals)) {\n    return internals;\n  }\n\n  if (!('role' in host)) {\n    throw new Error('Missing setupHostAria()');\n  }\n\n  let firstConnectedCallbacks:\n      Array<{property: ARIAProperty | 'role', callback: () => void}> = [];\n  let hasBeenConnected = false;\n\n  // Add support for Firefox, which has not yet implement ElementInternals aria\n  for (const ariaProperty of ARIA_PROPERTIES) {\n    let internalAriaValue: string|null = null;\n    Object.defineProperty(internals, ariaProperty, {\n      enumerable: true,\n      configurable: true,\n      get() {\n        return internalAriaValue;\n      },\n      set(value: string|null) {\n        const setValue = () => {\n          internalAriaValue = value;\n          if (!hasBeenConnected) {\n            firstConnectedCallbacks.push(\n                {property: ariaProperty, callback: setValue});\n            return;\n          }\n\n          // Dynamic lookup rather than hardcoding all properties.\n          // tslint:disable-next-line:no-dict-access-on-struct-type\n          host[ariaProperty] = value;\n        };\n\n        setValue();\n      },\n    });\n  }\n\n  let internalRoleValue: string|null = null;\n  Object.defineProperty(internals, 'role', {\n    enumerable: true,\n    configurable: true,\n    get() {\n      return internalRoleValue;\n    },\n    set(value: string|null) {\n      const setRole = () => {\n        internalRoleValue = value;\n\n        if (!hasBeenConnected) {\n          firstConnectedCallbacks.push({\n            property: 'role',\n            callback: setRole,\n          });\n          return;\n        }\n\n        if (value === null) {\n          host.removeAttribute('role');\n        } else {\n          host.setAttribute('role', value);\n        }\n      };\n\n      setRole();\n    },\n  });\n\n  host.addController({\n    hostConnected() {\n      if (hasBeenConnected) {\n        return;\n      }\n\n      hasBeenConnected = true;\n\n      const propertiesSetByUser = new Set<ARIAProperty|'role'>();\n\n      // See which properties were set by the user on host before we apply\n      // internals values as attributes to host. Needs to be done in another\n      // for loop because the callbacks set these attributes on host.\n      for (const {property} of firstConnectedCallbacks) {\n        const wasSetByUser =\n            host.getAttribute(ariaPropertyToAttribute(property)) !== null ||\n            // Dynamic lookup rather than hardcoding all properties.\n            // tslint:disable-next-line:no-dict-access-on-struct-type\n            host[property] !== undefined;\n\n        if (wasSetByUser) {\n          propertiesSetByUser.add(property);\n        }\n      }\n\n      for (const {property, callback} of firstConnectedCallbacks) {\n        // If the user has set the attribute or property, do not override the\n        // user's value\n        if (propertiesSetByUser.has(property)) {\n          continue;\n        }\n\n        callback();\n      }\n\n      // Remove strong callback references\n      firstConnectedCallbacks = [];\n    }\n  });\n\n  return internals;\n}\n\n\n// Separate function so that typescript doesn't complain about internals being\n// \"never\".\nfunction checkIfElementInternalsSupportsAria(internals: ElementInternals) {\n  return 'role' in internals;\n}\n"],
  "mappings": ";;;;;AAgBO,IAAM,kBAAkC;EAC7C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAWK,IAAM,kBAAkB,gBAAgB,IAAI,uBAAuB;AAwBpE,SAAU,wBACZ,UAAW;AACb,SAAO,SACK,QAAQ,QAAQ,OAAO,EAEvB,QAAQ,cAAc,EAAE,EACxB,YAAW;AACzB;AAsGM,SAAU,cACZ,MAA8B,EAAC,UAAS,IAA0B,CAAA,GAAE;AACtE,MAAI,cAAc,OAAO;AACvB,SAAK,eAAe,UAAO;AACzB,WAAK,cAAc;QACjB,gBAAa;AACX,cAAI,KAAK,aAAa,UAAU,GAAG;AACjC;;AAGF,eAAK,WAAW;QAClB;OACD;IACH,CAAC;;AAGH,MAAI,YAAY,UAAU,QAAQ,WAAW;AAC3C;;AAIF,aAAW,gBAAgB,iBAAiB;AAC1C,SAAK,eAAe,cAAc;MAChC,WAAW,wBAAwB,YAAY;MAC/C,SAAS;KACV;;AAGH,OAAK,eAAe,QAAQ,EAAC,SAAS,KAAI,CAAC;AAC7C;AAqCM,SAAU,6BACZ,MAAuB,WAA2B;AACpD,MAAI,oCAAoC,SAAS,GAAG;AAClD,WAAO;;AAGT,MAAI,EAAE,UAAU,OAAO;AACrB,UAAM,IAAI,MAAM,yBAAyB;;AAG3C,MAAI,0BACiE,CAAA;AACrE,MAAI,mBAAmB;AAGvB,aAAW,gBAAgB,iBAAiB;AAC1C,QAAI,oBAAiC;AACrC,WAAO,eAAe,WAAW,cAAc;MAC7C,YAAY;MACZ,cAAc;MACd,MAAG;AACD,eAAO;MACT;MACA,IAAI,OAAkB;AACpB,cAAM,WAAW,MAAK;AACpB,8BAAoB;AACpB,cAAI,CAAC,kBAAkB;AACrB,oCAAwB,KACpB,EAAC,UAAU,cAAc,UAAU,SAAQ,CAAC;AAChD;;AAKF,eAAK,YAAY,IAAI;QACvB;AAEA,iBAAQ;MACV;KACD;;AAGH,MAAI,oBAAiC;AACrC,SAAO,eAAe,WAAW,QAAQ;IACvC,YAAY;IACZ,cAAc;IACd,MAAG;AACD,aAAO;IACT;IACA,IAAI,OAAkB;AACpB,YAAM,UAAU,MAAK;AACnB,4BAAoB;AAEpB,YAAI,CAAC,kBAAkB;AACrB,kCAAwB,KAAK;YAC3B,UAAU;YACV,UAAU;WACX;AACD;;AAGF,YAAI,UAAU,MAAM;AAClB,eAAK,gBAAgB,MAAM;eACtB;AACL,eAAK,aAAa,QAAQ,KAAK;;MAEnC;AAEA,cAAO;IACT;GACD;AAED,OAAK,cAAc;IACjB,gBAAa;AACX,UAAI,kBAAkB;AACpB;;AAGF,yBAAmB;AAEnB,YAAM,sBAAsB,oBAAI,IAAG;AAKnC,iBAAW,EAAC,SAAQ,KAAK,yBAAyB;AAChD,cAAM,eACF,KAAK,aAAa,wBAAwB,QAAQ,CAAC,MAAM;;QAGzD,KAAK,QAAQ,MAAM;AAEvB,YAAI,cAAc;AAChB,8BAAoB,IAAI,QAAQ;;;AAIpC,iBAAW,EAAC,UAAU,SAAQ,KAAK,yBAAyB;AAG1D,YAAI,oBAAoB,IAAI,QAAQ,GAAG;AACrC;;AAGF,iBAAQ;;AAIV,gCAA0B,CAAA;IAC5B;GACD;AAED,SAAO;AACT;AAKA,SAAS,oCAAoC,WAA2B;AACtE,SAAO,UAAU;AACnB;",
  "names": []
}
