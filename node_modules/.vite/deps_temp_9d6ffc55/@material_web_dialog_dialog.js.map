{
  "version": 3,
  "sources": ["../../@material/web/dialog/internal/animations.ts", "../../@material/web/dialog/internal/dialog.ts", "../../@material/web/dialog/internal/dialog-styles.css.ts", "../../@material/web/dialog/dialog.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {EASING} from '../../internal/motion/animation.js';\n\n/**\n * A dialog animation's arguments. See `Element.prototype.animate`.\n */\nexport type DialogAnimationArgs = Parameters<Element['animate']>;\n\n/**\n * A collection of dialog animations. Each element of a dialog may have multiple\n * animations.\n */\nexport interface DialogAnimation {\n  /**\n   * Animations for the dialog itself.\n   */\n  dialog?: DialogAnimationArgs[];\n\n  /**\n   * Animations for the scrim backdrop.\n   */\n  scrim?: DialogAnimationArgs[];\n\n  /**\n   * Animations for the container of the dialog.\n   */\n  container?: DialogAnimationArgs[];\n\n  /**\n   * Animations for the headline section.\n   */\n  headline?: DialogAnimationArgs[];\n\n  /**\n   * Animations for the contents section.\n   */\n  content?: DialogAnimationArgs[];\n  /**\n   * Animations for the actions section.\n   */\n  actions?: DialogAnimationArgs[];\n}\n\n/**\n * The default dialog open animation.\n */\nexport const DIALOG_DEFAULT_OPEN_ANIMATION: DialogAnimation = {\n  dialog: [\n    [\n      // Dialog slide down\n      [{'transform': 'translateY(-50px)'}, {'transform': 'translateY(0)'}],\n      {duration: 500, easing: EASING.EMPHASIZED}\n    ],\n  ],\n  scrim: [\n    [\n      // Scrim fade in\n      [{'opacity': 0}, {'opacity': 0.32}], {duration: 500, easing: 'linear'}\n    ],\n  ],\n  container: [\n    [\n      // Container fade in\n      [{'opacity': 0}, {'opacity': 1}],\n      {duration: 50, easing: 'linear', pseudoElement: '::before'}\n    ],\n    [\n      // Container grow\n      // Note: current spec says to grow from 0dp->100% and shrink from\n      // 100%->35%. We change this to 35%->100% to simplify the animation that\n      // is supposed to clip content as it grows. From 0dp it's possible to see\n      // text/actions appear before the container has fully grown.\n      [{'height': '35%'}, {'height': '100%'}],\n      {duration: 500, easing: EASING.EMPHASIZED, pseudoElement: '::before'},\n    ],\n  ],\n  headline: [\n    [\n      // Headline fade in\n      [{'opacity': 0}, {'opacity': 0, offset: 0.2}, {'opacity': 1}],\n      {duration: 250, easing: 'linear', fill: 'forwards'}\n    ],\n  ],\n  content: [\n    [\n      // Content fade in\n      [{'opacity': 0}, {'opacity': 0, offset: 0.2}, {'opacity': 1}],\n      {duration: 250, easing: 'linear', fill: 'forwards'}\n    ],\n  ],\n  actions: [\n    [\n      // Actions fade in\n      [{'opacity': 0}, {'opacity': 0, offset: 0.5}, {'opacity': 1}],\n      {duration: 300, easing: 'linear', fill: 'forwards'}\n    ],\n  ],\n};\n\n/**\n * The default dialog close animation.\n */\nexport const DIALOG_DEFAULT_CLOSE_ANIMATION: DialogAnimation = {\n  dialog: [\n    [\n      // Dialog slide up\n      [{'transform': 'translateY(0)'}, {'transform': 'translateY(-50px)'}],\n      {duration: 150, easing: EASING.EMPHASIZED_ACCELERATE}\n    ],\n  ],\n  scrim: [\n    [\n      // Scrim fade out\n      [{'opacity': 0.32}, {'opacity': 0}], {duration: 150, easing: 'linear'}\n    ],\n  ],\n  container: [\n    [\n      // Container shrink\n      [{'height': '100%'}, {'height': '35%'}],\n      {\n        duration: 150,\n        easing: EASING.EMPHASIZED_ACCELERATE,\n        pseudoElement: '::before',\n      },\n    ],\n    [\n      // Container fade out\n      [{'opacity': '1'}, {'opacity': '0'}],\n      {delay: 100, duration: 50, easing: 'linear', pseudoElement: '::before'},\n    ]\n  ],\n  headline: [\n    [\n      // Headline fade out\n      [{'opacity': 1}, {'opacity': 0}],\n      {duration: 100, easing: 'linear', fill: 'forwards'}\n    ],\n  ],\n  content: [\n    [\n      // Content fade out\n      [{'opacity': 1}, {'opacity': 0}],\n      {duration: 100, easing: 'linear', fill: 'forwards'}\n    ],\n  ],\n  actions: [\n    [\n      // Actions fade out\n      [{'opacity': 1}, {'opacity': 0}],\n      {duration: 100, easing: 'linear', fill: 'forwards'}\n    ],\n  ],\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../divider/divider.js';\n\nimport {html, isServer, LitElement, nothing} from 'lit';\nimport {property, query, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {ARIAMixinStrict} from '../../internal/aria/aria.js';\nimport {requestUpdateOnAriaChange} from '../../internal/aria/delegate.js';\nimport {redispatchEvent} from '../../internal/controller/events.js';\n\nimport {DIALOG_DEFAULT_CLOSE_ANIMATION, DIALOG_DEFAULT_OPEN_ANIMATION, DialogAnimation, DialogAnimationArgs} from './animations.js';\n\n/**\n * A dialog component.\n *\n * @fires open Dispatched when the dialog is opening before any animations.\n * @fires opened Dispatched when the dialog has opened after any animations.\n * @fires close Dispatched when the dialog is closing before any animations.\n * @fires closed Dispatched when the dialog has closed after any animations.\n * @fires cancel Dispatched when the dialog has been canceled by clicking on the\n *     scrim or pressing Escape.\n */\nexport class Dialog extends LitElement {\n  static {\n    requestUpdateOnAriaChange(Dialog);\n  }\n\n  static override shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true\n  };\n\n  /**\n   * Opens the dialog when set to `true` and closes it when set to `false`.\n   */\n  @property({type: Boolean})\n  get open() {\n    return this.isOpen;\n  }\n\n  set open(open: boolean) {\n    if (open === this.isOpen) {\n      return;\n    }\n\n    this.isOpen = open;\n    if (open) {\n      this.setAttribute('open', '');\n      this.show();\n    } else {\n      this.removeAttribute('open');\n      this.close();\n    }\n  }\n\n  /**\n   * Gets or sets the dialog's return value, usually to indicate which button\n   * a user pressed to close it.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/returnValue\n   */\n  @property({attribute: false}) returnValue = '';\n\n  /**\n   * The type of dialog for accessibility. Set this to `alert` to announce a\n   * dialog as an alert dialog.\n   */\n  @property() type?: 'alert';\n\n  /**\n   * Gets the opening animation for a dialog. Set to a new function to customize\n   * the animation.\n   */\n  getOpenAnimation = () => DIALOG_DEFAULT_OPEN_ANIMATION;\n\n  /**\n   * Gets the closing animation for a dialog. Set to a new function to customize\n   * the animation.\n   */\n  getCloseAnimation = () => DIALOG_DEFAULT_CLOSE_ANIMATION;\n\n  private isOpen = false;\n  @query('dialog') private readonly dialog!: HTMLDialogElement|null;\n  @query('.scrim') private readonly scrim!: HTMLDialogElement|null;\n  @query('.container') private readonly container!: HTMLDialogElement|null;\n  @query('.headline') private readonly headline!: HTMLDialogElement|null;\n  @query('.content') private readonly content!: HTMLDialogElement|null;\n  @query('.actions') private readonly actions!: HTMLDialogElement|null;\n  @state() private isAtScrollTop = false;\n  @state() private isAtScrollBottom = false;\n  @query('.scroller') private readonly scroller!: HTMLElement|null;\n  @query('.top.anchor') private readonly topAnchor!: HTMLElement|null;\n  @query('.bottom.anchor') private readonly bottomAnchor!: HTMLElement|null;\n  private nextClickIsFromContent = false;\n  private intersectionObserver?: IntersectionObserver;\n  // Dialogs should not be SSR'd while open, so we can just use runtime checks.\n  @state() private hasHeadline = false;\n  @state() private hasActions = false;\n  @state() private hasIcon = false;\n\n  constructor() {\n    super();\n    if (!isServer) {\n      this.addEventListener('submit', this.handleSubmit);\n    }\n  }\n\n  /**\n   * Opens the dialog and fires a cancelable `open` event. After a dialog's\n   * animation, an `opened` event is fired.\n   *\n   * Add an `autocomplete` attribute to a child of the dialog that should\n   * receive focus after opening.\n   *\n   * @return A Promise that resolves after the animation is finished and the\n   *     `opened` event was fired.\n   */\n  async show() {\n    const {dialog, container} = this;\n    if (!dialog || !container || dialog.open) {\n      return;\n    }\n\n    const preventOpen =\n        !this.dispatchEvent(new Event('open', {cancelable: true}));\n    if (preventOpen) {\n      this.open = false;\n      return;\n    }\n\n    // All Material dialogs are modal.\n    dialog.showModal();\n    this.open = true;\n    // Reset scroll position if re-opening a dialog with the same content.\n    if (this.scroller) {\n      this.scroller.scrollTop = 0;\n    }\n    // Native modal dialogs ignore autofocus and instead force focus to the\n    // first focusable child. Override this behavior if there is a child with\n    // an autofocus attribute.\n    this.querySelector<HTMLElement>('[autofocus]')?.focus();\n\n    await this.animateDialog(this.getOpenAnimation());\n    this.dispatchEvent(new Event('opened'));\n  }\n\n  /**\n   * Closes the dialog and fires a cancelable `close` event. After a dialog's\n   * animation, a `closed` event is fired.\n   *\n   * @param returnValue A return value usually indicating which button was used\n   *     to close a dialog. If a dialog is canceled by clicking the scrim or\n   *     pressing Escape, it will not change the return value after closing.\n   * @return A Promise that resolves after the animation is finished and the\n   *     `closed` event was fired.\n   */\n  async close(returnValue = this.returnValue) {\n    const {dialog, container} = this;\n    if (!dialog || !container || !dialog.open) {\n      return;\n    }\n\n    const prevReturnValue = this.returnValue;\n    this.returnValue = returnValue;\n    const preventClose =\n        !this.dispatchEvent(new Event('close', {cancelable: true}));\n    if (preventClose) {\n      this.returnValue = prevReturnValue;\n      return;\n    }\n\n    await this.animateDialog(this.getCloseAnimation());\n    dialog.close(returnValue);\n    this.open = false;\n    this.dispatchEvent(new Event('closed'));\n  }\n\n  protected override render() {\n    const scrollable =\n        this.open && !(this.isAtScrollTop && this.isAtScrollBottom);\n    const classes = {\n      'has-headline': this.hasHeadline,\n      'has-actions': this.hasActions,\n      'has-icon': this.hasIcon,\n      'scrollable': scrollable,\n      'show-top-divider': scrollable && !this.isAtScrollTop,\n      'show-bottom-divider': scrollable && !this.isAtScrollBottom,\n    };\n\n    const {ariaLabel} = this as ARIAMixinStrict;\n    return html`\n      <div class=\"scrim\"></div>\n      <dialog\n        class=${classMap(classes)}\n        aria-label=${ariaLabel || nothing}\n        aria-labelledby=${this.hasHeadline ? 'headline' : nothing}\n        role=${this.type === 'alert' ? 'alertdialog' : nothing}\n        @cancel=${this.handleCancel}\n        @click=${this.handleDialogClick}\n        .returnValue=${this.returnValue || nothing}\n      >\n        <div class=\"container\"\n          @click=${this.handleContentClick}\n        >\n          <div class=\"headline\">\n            <div class=\"icon\" aria-hidden=\"true\">\n              <slot name=\"icon\" @slotchange=${this.handleIconChange}></slot>\n            </div>\n            <h2 id=\"headline\" aria-hidden=${!this.hasHeadline || nothing}>\n              <slot name=\"headline\"\n                  @slotchange=${this.handleHeadlineChange}></slot>\n            </h2>\n            <md-divider></md-divider>\n          </div>\n          <div class=\"scroller\">\n            <div class=\"content\">\n              <div class=\"top anchor\"></div>\n              <slot name=\"content\"></slot>\n              <div class=\"bottom anchor\"></div>\n            </div>\n          </div>\n          <div class=\"actions\">\n            <md-divider></md-divider>\n            <slot name=\"actions\"\n              @slotchange=${this.handleActionsChange}></slot>\n          </div>\n        </div>\n      </dialog>\n    `;\n  }\n\n  protected override firstUpdated() {\n    this.intersectionObserver = new IntersectionObserver(entries => {\n      for (const entry of entries) {\n        this.handleAnchorIntersection(entry);\n      }\n    }, {root: this.scroller!});\n\n    this.intersectionObserver.observe(this.topAnchor!);\n    this.intersectionObserver.observe(this.bottomAnchor!);\n  }\n\n  private handleDialogClick() {\n    if (this.nextClickIsFromContent) {\n      // Avoid doing a layout calculation below if we know the click came from\n      // content.\n      this.nextClickIsFromContent = false;\n      return;\n    }\n\n    // Click originated on the backdrop. Native `<dialog>`s will not cancel,\n    // but Material dialogs do.\n    const preventDefault =\n        !this.dispatchEvent(new Event('cancel', {cancelable: true}));\n    if (preventDefault) {\n      return;\n    }\n\n    this.close();\n  }\n\n  private handleContentClick() {\n    this.nextClickIsFromContent = true;\n  }\n\n  private handleSubmit(event: SubmitEvent) {\n    const form = event.target as HTMLFormElement;\n    const {submitter} = event;\n    if (form.method !== 'dialog' || !submitter) {\n      return;\n    }\n\n    // Close reason is the submitter's value attribute, or the dialog's\n    // `returnValue` if there is no attribute.\n    this.close(submitter.getAttribute('value') ?? this.returnValue);\n  }\n\n  private handleCancel(event: Event) {\n    if (event.target !== this.dialog) {\n      // Ignore any cancel events dispatched by content.\n      return;\n    }\n\n    const preventDefault = !redispatchEvent(this, event);\n    // We always prevent default on the original dialog event since we'll\n    // animate closing it before it actually closes.\n    event.preventDefault();\n    if (preventDefault) {\n      return;\n    }\n\n    this.close();\n  }\n\n  private async animateDialog(animation: DialogAnimation) {\n    const {dialog, scrim, container, headline, content, actions} = this;\n    if (!dialog || !scrim || !container || !headline || !content || !actions) {\n      return;\n    }\n\n    const {\n      container: containerAnimate,\n      dialog: dialogAnimate,\n      scrim: scrimAnimate,\n      headline: headlineAnimate,\n      content: contentAnimate,\n      actions: actionsAnimate\n    } = animation;\n\n    const elementAndAnimation: Array<[Element, DialogAnimationArgs[]]> = [\n      [dialog, dialogAnimate ?? []], [scrim, scrimAnimate ?? []],\n      [container, containerAnimate ?? []], [headline, headlineAnimate ?? []],\n      [content, contentAnimate ?? []], [actions, actionsAnimate ?? []]\n    ];\n\n    const animations: Animation[] = [];\n    for (const [element, animation] of elementAndAnimation) {\n      for (const animateArgs of animation) {\n        animations.push(element.animate(...animateArgs));\n      }\n    }\n\n    await Promise.all(animations.map(animation => animation.finished));\n  }\n\n  private handleHeadlineChange(event: Event) {\n    const slot = event.target as HTMLSlotElement;\n    this.hasHeadline = slot.assignedElements().length > 0;\n  }\n\n  private handleActionsChange(event: Event) {\n    const slot = event.target as HTMLSlotElement;\n    this.hasActions = slot.assignedElements().length > 0;\n  }\n\n  private handleIconChange(event: Event) {\n    const slot = event.target as HTMLSlotElement;\n    this.hasIcon = slot.assignedElements().length > 0;\n  }\n\n  private handleAnchorIntersection(entry: IntersectionObserverEntry) {\n    const {target, isIntersecting} = entry;\n    if (target === this.topAnchor) {\n      this.isAtScrollTop = isIntersecting;\n    }\n\n    if (target === this.bottomAnchor) {\n      this.isAtScrollBottom = isIntersecting;\n    }\n  }\n}\n", "/**\n  * @license\n  * Copyright 2022 Google LLC\n  * SPDX-License-Identifier: Apache-2.0\n  */\n import {css} from 'lit';\n export const styles = css`:host{--_container-color: var(--md-dialog-container-color, var(--md-sys-color-surface-container-high, #ece6f0));--_container-shape: var(--md-dialog-container-shape, 28px);--_headline-color: var(--md-dialog-headline-color, var(--md-sys-color-on-surface, #1d1b20));--_headline-type: var(--md-dialog-headline-type, var(--md-sys-typescale-headline-small, 400 1.5rem / 2rem var(--md-ref-typeface-brand, Roboto)));--_supporting-text-color: var(--md-dialog-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_supporting-text-type: var(--md-dialog-supporting-text-type, 400 0.875rem / 1.25rem var(--md-ref-typeface-plain, Roboto));--_icon-color: var(--md-dialog-icon-color, var(--md-sys-color-secondary, #625b71));--_icon-size: var(--md-dialog-icon-size, 24px);--_container-shape-start-start: var( --md-dialog-container-shape-start-start, var(--_container-shape) );--_container-shape-start-end: var( --md-dialog-container-shape-start-end, var(--_container-shape) );--_container-shape-end-end: var( --md-dialog-container-shape-end-end, var(--_container-shape) );--_container-shape-end-start: var( --md-dialog-container-shape-end-start, var(--_container-shape) );border-start-start-radius:var(--_container-shape-start-start);border-start-end-radius:var(--_container-shape-start-end);border-end-end-radius:var(--_container-shape-end-end);border-end-start-radius:var(--_container-shape-end-start);display:contents;margin:auto;max-height:min(560px,100% - 48px);max-width:min(560px,100% - 48px);min-height:140px;min-width:280px;position:fixed;height:fit-content;width:fit-content}dialog{background:rgba(0,0,0,0);border:none;border-radius:inherit;flex-direction:column;height:inherit;margin:inherit;max-height:inherit;max-width:inherit;min-height:inherit;min-width:inherit;outline:none;overflow:visible;padding:0;width:inherit}dialog[open]{display:flex}::backdrop{background:none}.scrim{background:var(--md-sys-color-scrim, #000);display:none;inset:0;opacity:32%;pointer-events:none;position:fixed;z-index:1}:host([open]) .scrim{display:flex}h2{all:unset;align-self:stretch}.headline{align-items:center;color:var(--_headline-color);display:flex;flex-direction:column;font:var(--_headline-type);position:relative}slot[name=headline]::slotted(*){align-items:center;align-self:stretch;display:flex;gap:8px;margin:24px 24px 0}.icon{display:flex}slot[name=icon]::slotted(*){color:var(--_icon-color);fill:currentColor;font-size:var(--_icon-size);margin-top:24px;height:var(--_icon-size);width:var(--_icon-size)}.has-icon slot[name=headline]::slotted(*){justify-content:center;margin-top:16px}.scrollable slot[name=headline]::slotted(*){margin-bottom:16px}.scrollable.has-headline slot[name=content]::slotted(*){margin-top:8px}.container{border-radius:inherit;display:flex;flex:1;flex-direction:column;overflow:hidden;position:relative;transform-origin:top}.container::before{background:var(--_container-color);content:\"\";inset:0;position:absolute}.scroller{flex:1;overflow:hidden;z-index:0}.scrollable .scroller{overflow-y:scroll}.content{color:var(--_supporting-text-color);font:var(--_supporting-text-type);position:relative}slot[name=content]::slotted(*){margin:24px}.anchor{position:absolute}.top.anchor{top:0}.bottom.anchor{bottom:0}.actions{position:relative}slot[name=actions]::slotted(*){display:flex;gap:8px;justify-content:flex-end;margin:16px 24px 24px}.has-actions slot[name=content]::slotted(*){margin-bottom:8px}md-divider{display:none;position:absolute}.has-headline.show-top-divider .headline md-divider,.has-actions.show-bottom-divider .actions md-divider{display:flex}.headline md-divider{bottom:0}.actions md-divider{top:0}@media(forced-colors: active){dialog{outline:2px solid WindowText}}/*# sourceMappingURL=dialog-styles.css.map */\n`;\n ", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {customElement} from 'lit/decorators.js';\n\nimport {Dialog} from './internal/dialog.js';\nimport {styles} from './internal/dialog-styles.css.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'md-dialog': MdDialog;\n  }\n}\n\n/**\n * @summary Dialogs can require an action, communicate information, or help\n * users accomplish a task. There are two types of dialogs: basic and\n * full-screen.\n *\n * @description\n * A dialog is a modal window that appears in front of app content to provide\n * critical information or ask for a decision. Dialogs disable all app\n * functionality when they appear, and remain on screen until confirmed,\n * dismissed, or a required action has been taken.\n *\n * Dialogs are purposefully interruptive, so they should be used sparingly.\n * A less disruptive alternative is to use a menu, which provides options\n * without interrupting a user’s experience.\n *\n * On mobile devices only, complex dialogs should be displayed fullscreen.\n *\n * __Example usages:__\n * - Common use cases for basic dialogs include alerts, quick selection, and\n * confirmation.\n * - More complex dialogs may contain actions that require a series of tasks\n * to complete. One example is creating a calendar entry with the event title,\n * date, location, and time.\n */\n@customElement('md-dialog')\nexport class MdDialog extends Dialog {\n  static override styles = [styles];\n}\n"],
  "mappings": "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",
  "names": ["animation", "MdDialog"]
}
