{
  "version": 3,
  "sources": ["../../@material/web/list/internal/list.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {html, LitElement, nothing} from 'lit';\nimport {property, query, queryAssignedElements} from 'lit/decorators.js';\n\nimport {ARIAMixinStrict, ARIARole} from '../../internal/aria/aria.js';\nimport {requestUpdateOnAriaChange} from '../../internal/aria/delegate.js';\n\nimport {ListItem} from './listitem/list-item.js';\n\nconst NAVIGABLE_KEYS = {\n  ArrowDown: 'ArrowDown',\n  ArrowUp: 'ArrowUp',\n  Home: 'Home',\n  End: 'End',\n} as const;\n\n/**\n * A record that describes a list item in a list with metadata such a reference\n * to the item and its index in the list.\n */\nexport interface ItemRecord {\n  item: ListItem;\n  index: number;\n}\n\ntype NavigatableValues = typeof NAVIGABLE_KEYS[keyof typeof NAVIGABLE_KEYS];\n\nconst navigableKeySet = new Set(Object.values(NAVIGABLE_KEYS));\n\nfunction isNavigableKey(key: string): key is NavigatableValues {\n  return navigableKeySet.has(key as NavigatableValues);\n}\n\n// tslint:disable-next-line:enforce-comments-on-exported-symbols\nexport class List extends LitElement {\n  static {\n    requestUpdateOnAriaChange(List);\n  }\n\n  /** @nocollapse */\n  static override shadowRootOptions:\n      ShadowRootInit = {mode: 'open', delegatesFocus: true};\n\n  @property() type: ARIARole|'' = 'list';\n\n  /**\n   * The tabindex of the underlying list.\n   */\n  @property({type: Number, attribute: 'list-tabindex'}) listTabIndex = 0;\n\n  @query('.md3-list') private listRoot!: HTMLElement|null;\n\n  /**\n   * An array of activatable and disableable list items. Queries every assigned\n   * element that has the `md-list-item` attribute.\n   *\n   * _NOTE:_ This is a shallow, flattened query via\n   * `HTMLSlotElement.queryAssignedElements` and thus will _only_ include direct\n   * children / directly slotted elements.\n   */\n  @queryAssignedElements({flatten: true, selector: '[md-list-item]'})\n  items!: ListItem[];\n\n  protected override render() {\n    return this.renderList();\n  }\n\n  /**\n   * Renders the main list element.\n   */\n  private renderList() {\n    // Needed for closure conformance\n    const {ariaLabel} = this as ARIAMixinStrict;\n    return html`\n    <ul class=\"md3-list\"\n        aria-label=${ariaLabel || nothing}\n        tabindex=${this.listTabIndex}\n        role=${this.type || nothing}\n        @keydown=${this.handleKeydown}\n        >\n      ${this.renderContent()}\n    </ul>\n  `;\n  }\n\n  /**\n   * The content to be slotted into the list.\n   */\n  private renderContent() {\n    return html`<span><slot @click=${(event: Event) => {\n      event.stopPropagation();\n    }}></slot></span>`;\n  }\n\n  /**\n   * Handles keyboard navigation in the list.\n   *\n   * @param event {KeyboardEvent} The keyboard event that triggers this handler.\n   */\n  private handleKeydown(event: KeyboardEvent) {\n    const key = event.key;\n    if (!isNavigableKey(key)) {\n      return;\n    }\n    // do not use this.items directly so we don't re-query the DOM unnecessarily\n    const items = this.items;\n\n    if (!items.length) {\n      return;\n    }\n\n    const activeItemRecord = List.getActiveItem(items);\n\n    if (activeItemRecord) {\n      activeItemRecord.item.active = false;\n    }\n\n    event.preventDefault();\n\n    switch (key) {\n      // Activate the next item\n      case NAVIGABLE_KEYS.ArrowDown:\n        this.activateNextItemInternal(items, activeItemRecord);\n        break;\n\n      // Activate the previous item\n      case NAVIGABLE_KEYS.ArrowUp:\n        this.activatePreviousItemInternal(items, activeItemRecord);\n        break;\n\n      // Activate the first item\n      case NAVIGABLE_KEYS.Home:\n        List.activateFirstItem(items);\n        break;\n\n      // Activate the last item\n      case NAVIGABLE_KEYS.End:\n        List.activateLastItem(items);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  private activateNextItemInternal(\n      items: ListItem[], activeItemRecord: null|ItemRecord): ListItem|null {\n    if (activeItemRecord) {\n      const next = List.getNextItem(items, activeItemRecord.index);\n\n      if (next) next.active = true;\n\n      return next;\n    } else {\n      return List.activateFirstItem(items);\n    }\n  }\n\n  private activatePreviousItemInternal(\n      items: ListItem[], activeItemRecord: null|ItemRecord): ListItem|null {\n    if (activeItemRecord) {\n      const prev = List.getPrevItem(items, activeItemRecord.index);\n      if (prev) prev.active = true;\n      return prev;\n    } else {\n      return List.activateLastItem(items);\n    }\n  }\n\n  /**\n   * Activates the next item in the list. If at the end of the list, the first\n   * item will be activated.\n   *\n   * @return The activated list item or `null` if there are no items.\n   */\n  activateNextItem(): ListItem|null {\n    const items = this.items;\n    const activeItemRecord = List.getActiveItem(items);\n    if (activeItemRecord) {\n      activeItemRecord.item.active = false;\n    }\n    return this.activateNextItemInternal(items, activeItemRecord);\n  }\n\n  /**\n   * Activates the previous item in the list. If at the start of the list, the\n   * last item will be activated.\n   *\n   * @return The activated list item or `null` if there are no items.\n   */\n  activatePreviousItem(): ListItem|null {\n    const items = this.items;\n    const activeItemRecord = List.getActiveItem(items);\n    if (activeItemRecord) {\n      activeItemRecord.item.active = false;\n    }\n    return this.activatePreviousItemInternal(items, activeItemRecord);\n  }\n\n  /**\n   * Activates the first non-disabled item of a given array of items.\n   *\n   * @param items {Array<ListItem>} The items from which to activate the\n   * first item.\n   * @nocollapse\n   */\n  static activateFirstItem<T extends ListItem>(items: T[]) {\n    // NOTE: These selector functions are static and not on the instance such\n    // that multiple operations can be chained and we do not have to re-query\n    // the DOM\n    const firstItem = List.getFirstActivatableItem(items);\n    if (firstItem) {\n      firstItem.active = true;\n    }\n    return firstItem;\n  }\n\n  /**\n   * Activates the last non-disabled item of a given array of items.\n   *\n   * @param items {Array<ListItem>} The items from which to activate the\n   * last item.\n   * @nocollapse\n   */\n  static activateLastItem<T extends ListItem>(items: T[]) {\n    const lastItem = List.getLastActivatableItem(items);\n    if (lastItem) {\n      lastItem.active = true;\n    }\n    return lastItem;\n  }\n\n  /**\n   * Deactivates the currently active item of a given array of items.\n   *\n   * @param items {Array<ListItem>} The items from which to deactivate the\n   * active item.\n   * @return A record of the deleselcted activated item including the item and\n   * the index of the item or `null` if none are deactivated.\n   * @nocollapse\n   */\n  static deactivateActiveItem<T extends ListItem>(items: T[]) {\n    const activeItem = List.getActiveItem(items);\n    if (activeItem) {\n      activeItem.item.active = false;\n    }\n    return activeItem;\n  }\n\n  override focus() {\n    this.listRoot?.focus();\n  }\n\n  /**\n   * Retrieves the first activated item of a given array of items.\n   *\n   * @param items {Array<ListItem>} The items to search.\n   * @return A record of the first activated item including the item and the\n   * index of the item or `null` if none are activated.\n   * @nocollapse\n   */\n  static getActiveItem<T extends ListItem>(items: T[]) {\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      if (item.active) {\n        return {\n          item,\n          index: i,\n        } as ItemRecord;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Retrieves the first non-disabled item of a given array of items. This\n   * the first item that is not disabled.\n   *\n   * @param items {Array<ListItem>} The items to search.\n   * @return The first activatable item or `null` if none are activatable.\n   * @nocollapse\n   */\n  static getFirstActivatableItem<T extends ListItem>(items: T[]) {\n    for (const item of items) {\n      if (!item.disabled) {\n        return item;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Retrieves the last non-disabled item of a given array of items.\n   *\n   * @param items {Array<ListItem>} The items to search.\n   * @return The last activatable item or `null` if none are activatable.\n   * @nocollapse\n   */\n  static getLastActivatableItem<T extends ListItem>(items: T[]) {\n    for (let i = items.length - 1; i >= 0; i--) {\n      const item = items[i];\n      if (!item.disabled) {\n        return item;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Retrieves the next non-disabled item of a given array of items.\n   *\n   * @param items {Array<ListItem>} The items to search.\n   * @param index {{index: number}} The index to search from.\n   * @return The next activatable item or `null` if none are activatable.\n   */\n  private static getNextItem<T extends ListItem>(items: T[], index: number) {\n    for (let i = 1; i < items.length; i++) {\n      const nextIndex = (i + index) % items.length;\n      const item = items[nextIndex];\n      if (!item.disabled) {\n        return item;\n      }\n    }\n\n    return items[index] ? items[index] : null;\n  }\n\n  /**\n   * Retrieves the previous non-disabled item of a given array of items.\n   *\n   * @param items {Array<ListItem>} The items to search.\n   * @param index {{index: number}} The index to search from.\n   * @return The previous activatable item or `null` if none are activatable.\n   */\n  private static getPrevItem<T extends ListItem>(items: T[], index: number) {\n    for (let i = 1; i < items.length; i++) {\n      const prevIndex = (index - i + items.length) % items.length;\n      const item = items[prevIndex];\n\n      if (!item.disabled) {\n        return item;\n      }\n    }\n\n    return items[index] ? items[index] : null;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
