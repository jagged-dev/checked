{
  "version": 3,
  "sources": ["../../@material/web/menu/internal/submenuitem/sub-menu-item.ts", "../../@material/web/menu/sub-menu-item.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {html} from 'lit';\nimport {property, queryAssignedElements, state} from 'lit/decorators.js';\n\nimport {List} from '../../../list/internal/list.js';\nimport {Corner, Menu} from '../menu.js';\nimport {MenuItemEl} from '../menuitem/menu-item.js';\nimport {CLOSE_REASON, CloseMenuEvent, createActivateTypeaheadEvent, createCloseOnFocusoutEvent, createDeactivateItemsEvent, createDeactivateTypeaheadEvent, createStayOpenOnFocusoutEvent, KEYDOWN_CLOSE_KEYS, NAVIGABLE_KEY, SELECTION_KEY} from '../shared.js';\n\nfunction stopPropagation(event: Event) {\n  event.stopPropagation();\n}\n\n/**\n * @fires deactivate-items Requests the parent menu to deselect other items when\n * a submenu opens\n * @fires deactivate-typeahead Requests the parent menu to deactivate the\n * typeahead functionality when a submenu opens\n * @fires activate-typeahead Requests the parent menu to activate the typeahead\n * functionality when a submenu closes\n * @fires stay-open-on-focusout Requests the parent menu to stay open when\n * focusout event is fired or has a `null` `relatedTarget` when submenu is\n * opened.\n * @fires close-on-focusout Requests the parent menu to close when focusout\n * event is fired or has a `null` `relatedTarget` When submenu is closed.\n */\nexport class SubMenuItem extends MenuItemEl {\n  /**\n   * The anchorCorner to set on the submenu.\n   */\n  @property({attribute: 'anchor-corner'}) anchorCorner: Corner = 'START_END';\n  /**\n   * The menuCorner to set on the submenu.\n   */\n  @property({attribute: 'menu-corner'}) menuCorner: Corner = 'START_START';\n  /**\n   * The delay between pointerenter and submenu opening.\n   */\n  @property({type: Number, attribute: 'hover-open-delay'}) hoverOpenDelay = 400;\n  /**\n   * The delay between ponterleave and the submenu closing.\n   */\n  @property({type: Number, attribute: 'hover-close-delay'})\n  hoverCloseDelay = 400;\n  /**\n   * Sets the item in the selected visual state when a submenu is opened.\n   */\n  @property({type: Boolean, reflect: true}) selected = false;\n\n  @state() protected submenuHover = false;\n\n  @queryAssignedElements({slot: 'submenu', flatten: true})\n  private readonly menus!: Menu[];\n\n  protected override keepOpenOnClick = true;\n  private previousOpenTimeout = 0;\n  private previousCloseTimeout = 0;\n\n  private get submenuEl(): Menu|undefined {\n    return this.menus[0];\n  }\n\n  /**\n   * Starts the default 400ms countdown to open the submenu.\n   */\n  protected override onPointerenter = () => {\n    clearTimeout(this.previousOpenTimeout);\n    clearTimeout(this.previousCloseTimeout);\n    if (this.submenuEl?.open) return;\n\n    // Open synchronously if delay is 0. (screenshot tests infra\n    // would never resolve otherwise)\n    if (!this.hoverOpenDelay) {\n      this.show();\n    } else {\n      this.previousOpenTimeout = setTimeout(() => {\n        this.show();\n      }, this.hoverOpenDelay);\n    }\n  };\n\n  /**\n   * Starts the default 400ms countdown to close the submenu.\n   */\n  protected override onPointerleave = () => {\n    clearTimeout(this.previousCloseTimeout);\n    clearTimeout(this.previousOpenTimeout);\n\n    // Close synchronously if delay is 0. (screenshot tests infra\n    // would never resolve otherwise)\n    if (!this.hoverCloseDelay) {\n      this.close();\n    } else {\n      this.previousCloseTimeout = setTimeout(() => {\n        this.close();\n      }, this.hoverCloseDelay);\n    }\n  };\n\n  protected override onClick() {\n    this.show();\n  }\n\n  protected override getRenderClasses() {\n    return {...super.getRenderClasses(), 'submenu-hover': this.submenuHover};\n  }\n\n  /**\n   * On item keydown handles opening the submenu.\n   */\n  protected override onKeydown(event: KeyboardEvent) {\n    const shouldOpenSubmenu = this.isSubmenuOpenKey(event.code);\n\n    if (event.code === SELECTION_KEY.SPACE) {\n      // prevent space from scrolling. Only open the submenu.\n      event.preventDefault();\n    }\n\n    if (!shouldOpenSubmenu) {\n      super.onKeydown(event);\n      return;\n    }\n\n    const submenu = this.submenuEl;\n    if (!submenu) return;\n\n    const submenuItems = submenu.items;\n    const firstActivatableItem = List.getFirstActivatableItem(submenuItems);\n\n    if (firstActivatableItem) {\n      this.show(() => {\n        firstActivatableItem.active = true;\n      });\n\n      return;\n    }\n  }\n\n  /**\n   * Render the submenu at the end\n   */\n  protected override renderEnd() {\n    return html`${super.renderEnd()}${this.renderSubMenu()}`;\n  }\n\n  /**\n   * Renders the slot for the submenu.\n   */\n  private renderSubMenu() {\n    return html`<span class=\"submenu\"><slot\n        name=\"submenu\"\n        @pointerenter=${this.onSubmenuPointerEnter}\n        @pointerleave=${this.onSubmenuPointerLeave}\n        @pointerdown=${stopPropagation}\n        @click=${stopPropagation}\n        @keydown=${this.onSubMenuKeydown}\n        @close-menu=${this.onCloseSubmenu}\n    ></slot></span>`;\n  }\n\n  private onCloseSubmenu(event: CloseMenuEvent) {\n    const {itemPath, reason} = event.detail;\n    itemPath.push(this);\n    // Restore focusout behavior\n    this.dispatchEvent(createCloseOnFocusoutEvent());\n    this.dispatchEvent(createActivateTypeaheadEvent());\n    // Escape should only close one menu not all of the menus unlike space or\n    // click selection which should close all menus.\n    if (reason.kind === CLOSE_REASON.KEYDOWN &&\n        reason.key === KEYDOWN_CLOSE_KEYS.ESCAPE) {\n      event.stopPropagation();\n      this.active = true;\n      this.selected = false;\n      // It might already be active so manually focus\n      this.listItemRoot?.focus();\n      return;\n    }\n\n    this.active = false;\n    this.selected = false;\n  }\n\n  private async onSubMenuKeydown(event: KeyboardEvent) {\n    // Stop propagation so that we don't accidentally close every parent menu.\n    // Additionally, we want to isolate things like the typeahead keydowns\n    // from bubbling up to the parent menu and confounding things.\n    event.stopPropagation();\n    const shouldClose = this.isSubmenuCloseKey(event.code);\n\n    if (!shouldClose) return;\n\n    this.close(() => {\n      List.deactivateActiveItem(this.submenuEl!.items);\n      this.listItemRoot?.focus();\n      this.active = true;\n    });\n  }\n\n  /**\n   * Shows the submenu.\n   *\n   * @param onOpened A function to call after the menu is opened.\n   */\n  show(onOpened = () => {}) {\n    const menu = this.submenuEl;\n    if (!menu) return;\n\n    menu.quick = true;\n    // Submenus are in overflow when not fixed. Can remove once we have native\n    // popup support\n    menu.hasOverflow = true;\n    menu.anchorCorner = this.anchorCorner;\n    menu.menuCorner = this.menuCorner;\n    menu.anchor = this;\n    // We manually set focus with `active` on keyboard navigation. And we\n    // want to focus the root on hover, so the user can pick up navigation with\n    // keyboard after hover.\n    menu.defaultFocus = 'LIST_ROOT';\n    menu.skipRestoreFocus = true;\n    menu.stayOpenOnOutsideClick = true;\n    menu.stayOpenOnFocusout = true;\n\n    // Menu could already be opened because of mouse interaction\n    const menuAlreadyOpen = menu.open;\n    // We want the parent to stay open in the case such that a middle submenu\n    // has a submenuitem hovered which opens a third submenut. Then if you hover\n    // on yet another middle menu-item (not submenuitem) then focusout Event's\n    // relatedTarget will be `null` thus, causing all the menus to close\n    this.dispatchEvent(createStayOpenOnFocusoutEvent());\n    menu.show();\n\n    // Deactivate other items. This can be the case if the user has tabbed\n    // around the menu and then mouses over an md-sub-menu.\n    this.dispatchEvent(createDeactivateItemsEvent());\n    this.dispatchEvent(createDeactivateTypeaheadEvent());\n    this.selected = true;\n\n    // This is the case of mouse hovering when already opened via keyboard or\n    // vice versa\n    if (menuAlreadyOpen) {\n      onOpened();\n    } else {\n      menu.addEventListener('opened', onOpened, {once: true});\n    }\n  }\n\n  /**\n   * Closes the submenu.\n   *\n   * @param onClosed A function to call after the menu is closed.\n   */\n  close(onClosed = () => {}) {\n    const menu = this.submenuEl;\n    if (!menu || !menu.open) return;\n\n    this.dispatchEvent(createActivateTypeaheadEvent());\n    menu.quick = true;\n    menu.close();\n    // Restore focusout behavior.\n    this.dispatchEvent(createCloseOnFocusoutEvent());\n    this.active = false;\n    this.selected = false;\n    menu.addEventListener('closed', onClosed, {once: true});\n  }\n\n  /**\n   * Determines whether the given KeyboardEvent code is one that should open\n   * the submenu. This is RTL-aware. By default, left, right, space, or enter.\n   *\n   * @param code The native KeyboardEvent code.\n   * @return Whether or not the key code should open the submenu.\n   */\n  private isSubmenuOpenKey(code: string) {\n    const isRtl = getComputedStyle(this).direction === 'rtl';\n    const arrowEnterKey = isRtl ? NAVIGABLE_KEY.LEFT : NAVIGABLE_KEY.RIGHT;\n    switch (code) {\n      case arrowEnterKey:\n      case SELECTION_KEY.SPACE:\n      case SELECTION_KEY.ENTER:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Determines whether the given KeyboardEvent code is one that should close\n   * the submenu. This is RTL-aware. By default right, left, or escape.\n   *\n   * @param code The native KeyboardEvent code.\n   * @return Whether or not the key code should close the submenu.\n   */\n  private isSubmenuCloseKey(code: string) {\n    const isRtl = getComputedStyle(this).direction === 'rtl';\n    const arrowEnterKey = isRtl ? NAVIGABLE_KEY.RIGHT : NAVIGABLE_KEY.LEFT;\n    switch (code) {\n      case arrowEnterKey:\n      case KEYDOWN_CLOSE_KEYS.ESCAPE:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  private onSubmenuPointerEnter() {\n    this.submenuHover = true;\n  }\n\n  private onSubmenuPointerLeave() {\n    this.submenuHover = false;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {customElement} from 'lit/decorators.js';\n\nimport {styles as listItemForcedColorsStyles} from '../list/internal/listitem/forced-colors-styles.css.js';\nimport {styles as listItemStyles} from '../list/internal/listitem/list-item-styles.css.js';\n\nimport {styles as forcedColorsStyles} from './internal/menuitem/forced-colors-styles.css.js';\nimport {styles} from './internal/menuitem/menu-item-styles.css.js';\nimport {SubMenuItem} from './internal/submenuitem/sub-menu-item.js';\n\nexport {ListItem} from '../list/internal/listitem/list-item.js';\nexport {CloseMenuEvent, MenuItem} from './internal/shared.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'md-sub-menu-item': MdSubMenuItem;\n  }\n}\n\n/**\n * @summary Menus display a list of choices on a temporary surface.\n *\n * @description\n * Menu items are the selectable choices within the menu. Menu items must\n * implement the `MenuItem` interface and also have the `md-menu-item`\n * attribute. Additionally menu items are list items so they must also have the\n * `md-list-item` attribute.\n *\n * Menu items can control a menu by selectively firing the `close-menu` and\n * `deselect-items` events.\n *\n * This menu item will open a sub-menu that is slotted in the `submenu` slot.\n * Additionally, the containing menu must either have `has-overflow` or `fixed`\n * set to `true` in order to display the containing menu properly.\n *\n * @example\n * ```html\n * <div style=\"position:relative;\">\n *   <button\n *       class=\"anchor\"\n *       ${ref(anchorRef)}\n *       @click=${() => this.menuRef.value.show()}>\n *     Click to open menu\n *   </button>\n *   <!--\n *     `has-overflow` is required when using a submenu which overflows the\n *     menu's contents\n *   -->\n *   <md-menu has-overflow ${ref(menuRef)} ${(el) => el.anchor =\n * anchorRef.value}> <md-menu-item header=\"This is a header\"></md-menu-item>\n *     <md-sub-menu-item header=\"this is a submenu item\">\n *       <md-menu slot=\"submenu\">\n *         <md-menu-item\n *           header=\"This is an item inside a submenu\"></md-menu-item>\n *       </md-menu>\n *     </md-sub-menu>\n *   </md-menu>\n * </div>\n * ```\n *\n * @final\n * @suppress {visibility}\n */\n@customElement('md-sub-menu-item')\nexport class MdSubMenuItem extends SubMenuItem {\n  static override styles =\n      [listItemStyles, styles, listItemForcedColorsStyles, forcedColorsStyles];\n}\n"],
  "mappings": "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",
  "names": ["MdSubMenuItem", "styles"]
}
